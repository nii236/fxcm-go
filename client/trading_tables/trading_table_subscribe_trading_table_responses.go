// Code generated by go-swagger; DO NOT EDIT.

package trading_tables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// TradingTableSubscribeTradingTableReader is a Reader for the TradingTableSubscribeTradingTable structure.
type TradingTableSubscribeTradingTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TradingTableSubscribeTradingTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTradingTableSubscribeTradingTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTradingTableSubscribeTradingTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTradingTableSubscribeTradingTableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTradingTableSubscribeTradingTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTradingTableSubscribeTradingTableOK creates a TradingTableSubscribeTradingTableOK with default headers values
func NewTradingTableSubscribeTradingTableOK() *TradingTableSubscribeTradingTableOK {
	return &TradingTableSubscribeTradingTableOK{}
}

/*TradingTableSubscribeTradingTableOK handles this case with default header values.

OK
*/
type TradingTableSubscribeTradingTableOK struct {
	Payload *models.SubscribeTradingTableResponseDefinition
}

func (o *TradingTableSubscribeTradingTableOK) Error() string {
	return fmt.Sprintf("[POST /trading/subscribe][%d] tradingTableSubscribeTradingTableOK  %+v", 200, o.Payload)
}

func (o *TradingTableSubscribeTradingTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SubscribeTradingTableResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSubscribeTradingTableUnauthorized creates a TradingTableSubscribeTradingTableUnauthorized with default headers values
func NewTradingTableSubscribeTradingTableUnauthorized() *TradingTableSubscribeTradingTableUnauthorized {
	return &TradingTableSubscribeTradingTableUnauthorized{}
}

/*TradingTableSubscribeTradingTableUnauthorized handles this case with default header values.

Unauthorized
*/
type TradingTableSubscribeTradingTableUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *TradingTableSubscribeTradingTableUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/subscribe][%d] tradingTableSubscribeTradingTableUnauthorized  %+v", 401, o.Payload)
}

func (o *TradingTableSubscribeTradingTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSubscribeTradingTableForbidden creates a TradingTableSubscribeTradingTableForbidden with default headers values
func NewTradingTableSubscribeTradingTableForbidden() *TradingTableSubscribeTradingTableForbidden {
	return &TradingTableSubscribeTradingTableForbidden{}
}

/*TradingTableSubscribeTradingTableForbidden handles this case with default header values.

Forbidden
*/
type TradingTableSubscribeTradingTableForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *TradingTableSubscribeTradingTableForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/subscribe][%d] tradingTableSubscribeTradingTableForbidden  %+v", 403, o.Payload)
}

func (o *TradingTableSubscribeTradingTableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSubscribeTradingTableNotFound creates a TradingTableSubscribeTradingTableNotFound with default headers values
func NewTradingTableSubscribeTradingTableNotFound() *TradingTableSubscribeTradingTableNotFound {
	return &TradingTableSubscribeTradingTableNotFound{}
}

/*TradingTableSubscribeTradingTableNotFound handles this case with default header values.

Not found
*/
type TradingTableSubscribeTradingTableNotFound struct {
	Payload *models.Error404NotFound
}

func (o *TradingTableSubscribeTradingTableNotFound) Error() string {
	return fmt.Sprintf("[POST /trading/subscribe][%d] tradingTableSubscribeTradingTableNotFound  %+v", 404, o.Payload)
}

func (o *TradingTableSubscribeTradingTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

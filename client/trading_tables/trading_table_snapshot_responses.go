// Code generated by go-swagger; DO NOT EDIT.

package trading_tables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// TradingTableSnapshotReader is a Reader for the TradingTableSnapshot structure.
type TradingTableSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TradingTableSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTradingTableSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTradingTableSnapshotUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTradingTableSnapshotForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTradingTableSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTradingTableSnapshotOK creates a TradingTableSnapshotOK with default headers values
func NewTradingTableSnapshotOK() *TradingTableSnapshotOK {
	return &TradingTableSnapshotOK{}
}

/*TradingTableSnapshotOK handles this case with default header values.

OK
*/
type TradingTableSnapshotOK struct {
	Payload *models.OpenPositionResponseDefinition
}

func (o *TradingTableSnapshotOK) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=OpenPosition][%d] tradingTableSnapshotOK  %+v", 200, o.Payload)
}

func (o *TradingTableSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenPositionResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSnapshotUnauthorized creates a TradingTableSnapshotUnauthorized with default headers values
func NewTradingTableSnapshotUnauthorized() *TradingTableSnapshotUnauthorized {
	return &TradingTableSnapshotUnauthorized{}
}

/*TradingTableSnapshotUnauthorized handles this case with default header values.

Unauthorized
*/
type TradingTableSnapshotUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *TradingTableSnapshotUnauthorized) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=OpenPosition][%d] tradingTableSnapshotUnauthorized  %+v", 401, o.Payload)
}

func (o *TradingTableSnapshotUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSnapshotForbidden creates a TradingTableSnapshotForbidden with default headers values
func NewTradingTableSnapshotForbidden() *TradingTableSnapshotForbidden {
	return &TradingTableSnapshotForbidden{}
}

/*TradingTableSnapshotForbidden handles this case with default header values.

Forbidden
*/
type TradingTableSnapshotForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *TradingTableSnapshotForbidden) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=OpenPosition][%d] tradingTableSnapshotForbidden  %+v", 403, o.Payload)
}

func (o *TradingTableSnapshotForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableSnapshotNotFound creates a TradingTableSnapshotNotFound with default headers values
func NewTradingTableSnapshotNotFound() *TradingTableSnapshotNotFound {
	return &TradingTableSnapshotNotFound{}
}

/*TradingTableSnapshotNotFound handles this case with default header values.

Not found
*/
type TradingTableSnapshotNotFound struct {
	Payload *models.Error404NotFound
}

func (o *TradingTableSnapshotNotFound) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=OpenPosition][%d] tradingTableSnapshotNotFound  %+v", 404, o.Payload)
}

func (o *TradingTableSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

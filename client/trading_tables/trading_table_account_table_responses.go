// Code generated by go-swagger; DO NOT EDIT.

package trading_tables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// TradingTableAccountTableReader is a Reader for the TradingTableAccountTable structure.
type TradingTableAccountTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TradingTableAccountTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTradingTableAccountTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTradingTableAccountTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTradingTableAccountTableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTradingTableAccountTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTradingTableAccountTableOK creates a TradingTableAccountTableOK with default headers values
func NewTradingTableAccountTableOK() *TradingTableAccountTableOK {
	return &TradingTableAccountTableOK{}
}

/*TradingTableAccountTableOK handles this case with default header values.

OK
*/
type TradingTableAccountTableOK struct {
	Payload *models.AccountTableResponseDefinition
}

func (o *TradingTableAccountTableOK) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=Account][%d] tradingTableAccountTableOK  %+v", 200, o.Payload)
}

func (o *TradingTableAccountTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountTableResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableAccountTableUnauthorized creates a TradingTableAccountTableUnauthorized with default headers values
func NewTradingTableAccountTableUnauthorized() *TradingTableAccountTableUnauthorized {
	return &TradingTableAccountTableUnauthorized{}
}

/*TradingTableAccountTableUnauthorized handles this case with default header values.

Unauthorized
*/
type TradingTableAccountTableUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *TradingTableAccountTableUnauthorized) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=Account][%d] tradingTableAccountTableUnauthorized  %+v", 401, o.Payload)
}

func (o *TradingTableAccountTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableAccountTableForbidden creates a TradingTableAccountTableForbidden with default headers values
func NewTradingTableAccountTableForbidden() *TradingTableAccountTableForbidden {
	return &TradingTableAccountTableForbidden{}
}

/*TradingTableAccountTableForbidden handles this case with default header values.

Forbidden
*/
type TradingTableAccountTableForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *TradingTableAccountTableForbidden) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=Account][%d] tradingTableAccountTableForbidden  %+v", 403, o.Payload)
}

func (o *TradingTableAccountTableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableAccountTableNotFound creates a TradingTableAccountTableNotFound with default headers values
func NewTradingTableAccountTableNotFound() *TradingTableAccountTableNotFound {
	return &TradingTableAccountTableNotFound{}
}

/*TradingTableAccountTableNotFound handles this case with default header values.

Not found
*/
type TradingTableAccountTableNotFound struct {
	Payload *models.Error404NotFound
}

func (o *TradingTableAccountTableNotFound) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=Account][%d] tradingTableAccountTableNotFound  %+v", 404, o.Payload)
}

func (o *TradingTableAccountTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package trading_tables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// TradingTableClosedPositionsReader is a Reader for the TradingTableClosedPositions structure.
type TradingTableClosedPositionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TradingTableClosedPositionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTradingTableClosedPositionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTradingTableClosedPositionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTradingTableClosedPositionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTradingTableClosedPositionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTradingTableClosedPositionsOK creates a TradingTableClosedPositionsOK with default headers values
func NewTradingTableClosedPositionsOK() *TradingTableClosedPositionsOK {
	return &TradingTableClosedPositionsOK{}
}

/*TradingTableClosedPositionsOK handles this case with default header values.

OK
*/
type TradingTableClosedPositionsOK struct {
	Payload *models.ClosedPositionResponseDefinition
}

func (o *TradingTableClosedPositionsOK) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=ClosedPosition][%d] tradingTableClosedPositionsOK  %+v", 200, o.Payload)
}

func (o *TradingTableClosedPositionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClosedPositionResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableClosedPositionsUnauthorized creates a TradingTableClosedPositionsUnauthorized with default headers values
func NewTradingTableClosedPositionsUnauthorized() *TradingTableClosedPositionsUnauthorized {
	return &TradingTableClosedPositionsUnauthorized{}
}

/*TradingTableClosedPositionsUnauthorized handles this case with default header values.

Unauthorized
*/
type TradingTableClosedPositionsUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *TradingTableClosedPositionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=ClosedPosition][%d] tradingTableClosedPositionsUnauthorized  %+v", 401, o.Payload)
}

func (o *TradingTableClosedPositionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableClosedPositionsForbidden creates a TradingTableClosedPositionsForbidden with default headers values
func NewTradingTableClosedPositionsForbidden() *TradingTableClosedPositionsForbidden {
	return &TradingTableClosedPositionsForbidden{}
}

/*TradingTableClosedPositionsForbidden handles this case with default header values.

Forbidden
*/
type TradingTableClosedPositionsForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *TradingTableClosedPositionsForbidden) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=ClosedPosition][%d] tradingTableClosedPositionsForbidden  %+v", 403, o.Payload)
}

func (o *TradingTableClosedPositionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTradingTableClosedPositionsNotFound creates a TradingTableClosedPositionsNotFound with default headers values
func NewTradingTableClosedPositionsNotFound() *TradingTableClosedPositionsNotFound {
	return &TradingTableClosedPositionsNotFound{}
}

/*TradingTableClosedPositionsNotFound handles this case with default header values.

Not found
*/
type TradingTableClosedPositionsNotFound struct {
	Payload *models.Error404NotFound
}

func (o *TradingTableClosedPositionsNotFound) Error() string {
	return fmt.Sprintf("[GET /trading/get_model&model=ClosedPosition][%d] tradingTableClosedPositionsNotFound  %+v", 404, o.Payload)
}

func (o *TradingTableClosedPositionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

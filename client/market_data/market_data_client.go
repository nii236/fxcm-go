// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new market data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MarketDataSubscribeMarketData markets data subscription

After subscribing, market price updates will be pushed to the client via the socket
*/
func (a *Client) MarketDataSubscribeMarketData(params *MarketDataSubscribeMarketDataParams, authInfo runtime.ClientAuthInfoWriter) (*MarketDataSubscribeMarketDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarketDataSubscribeMarketDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "marketData/subscribeMarketData",
		Method:             "POST",
		PathPattern:        "/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarketDataSubscribeMarketDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MarketDataSubscribeMarketDataOK), nil

}

/*
MarketDataUnsubscribeMarketData markets data unsubscription

unsubscribe market data
*/
func (a *Client) MarketDataUnsubscribeMarketData(params *MarketDataUnsubscribeMarketDataParams, authInfo runtime.ClientAuthInfoWriter) (*MarketDataUnsubscribeMarketDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarketDataUnsubscribeMarketDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "marketData/unsubscribeMarketData",
		Method:             "POST",
		PathPattern:        "/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarketDataUnsubscribeMarketDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MarketDataUnsubscribeMarketDataOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

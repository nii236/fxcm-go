// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// DeleteOrderReader is a Reader for the DeleteOrder structure.
type DeleteOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteOrderOK creates a DeleteOrderOK with default headers values
func NewDeleteOrderOK() *DeleteOrderOK {
	return &DeleteOrderOK{}
}

/*DeleteOrderOK handles this case with default header values.

OK
*/
type DeleteOrderOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *DeleteOrderOK) Error() string {
	return fmt.Sprintf("[POST /trading/delete_order][%d] deleteOrderOK  %+v", 200, o.Payload)
}

func (o *DeleteOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrderUnauthorized creates a DeleteOrderUnauthorized with default headers values
func NewDeleteOrderUnauthorized() *DeleteOrderUnauthorized {
	return &DeleteOrderUnauthorized{}
}

/*DeleteOrderUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteOrderUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *DeleteOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/delete_order][%d] deleteOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrderForbidden creates a DeleteOrderForbidden with default headers values
func NewDeleteOrderForbidden() *DeleteOrderForbidden {
	return &DeleteOrderForbidden{}
}

/*DeleteOrderForbidden handles this case with default header values.

Forbidden
*/
type DeleteOrderForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *DeleteOrderForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/delete_order][%d] deleteOrderForbidden  %+v", 403, o.Payload)
}

func (o *DeleteOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrderNotFound creates a DeleteOrderNotFound with default headers values
func NewDeleteOrderNotFound() *DeleteOrderNotFound {
	return &DeleteOrderNotFound{}
}

/*DeleteOrderNotFound handles this case with default header values.

Not found
*/
type DeleteOrderNotFound struct {
	Payload *models.Error404NotFound
}

func (o *DeleteOrderNotFound) Error() string {
	return fmt.Sprintf("[POST /trading/delete_order][%d] deleteOrderNotFound  %+v", 404, o.Payload)
}

func (o *DeleteOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

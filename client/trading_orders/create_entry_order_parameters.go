// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewCreateEntryOrderParams creates a new CreateEntryOrderParams object
// with the default values initialized.
func NewCreateEntryOrderParams() *CreateEntryOrderParams {
	var ()
	return &CreateEntryOrderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateEntryOrderParamsWithTimeout creates a new CreateEntryOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateEntryOrderParamsWithTimeout(timeout time.Duration) *CreateEntryOrderParams {
	var ()
	return &CreateEntryOrderParams{

		timeout: timeout,
	}
}

// NewCreateEntryOrderParamsWithContext creates a new CreateEntryOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateEntryOrderParamsWithContext(ctx context.Context) *CreateEntryOrderParams {
	var ()
	return &CreateEntryOrderParams{

		Context: ctx,
	}
}

// NewCreateEntryOrderParamsWithHTTPClient creates a new CreateEntryOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateEntryOrderParamsWithHTTPClient(client *http.Client) *CreateEntryOrderParams {
	var ()
	return &CreateEntryOrderParams{
		HTTPClient: client,
	}
}

/*CreateEntryOrderParams contains all the parameters to send to the API endpoint
for the create entry order operation typically these are written to a http.Request
*/
type CreateEntryOrderParams struct {

	/*AccountID
	  The trade‘s account identifier

	*/
	AccountID string
	/*Amount
	  The trade‘s amount in lots.

	*/
	Amount string
	/*Body*/
	Body models.EntryOrderRequestDefinition
	/*IsBuy
	  Defines the trade‘s market side (if true, then buy trade,otherwise sell trade). Temporarily not required by the server and defaults to true but this will change.

	*/
	IsBuy *bool
	/*IsInPips
	  Defines if the trade‘s stop/limit rate is in pips.

	*/
	IsInPips *bool
	/*Limit
	  The trade‘s limit rate.

	*/
	Limit *float64
	/*OrderType
	  The type of the order execution. Market Order type choices “AtMarket”, “MarketRange”.

	*/
	OrderType string
	/*Rate
	  The trade‘s rate.

	*/
	Rate *float64
	/*Stop
	  The trade‘s stop rate.

	*/
	Stop *float64
	/*Symbol
	  The trade‘s account identifier

	*/
	Symbol string
	/*TimeInForce
	  Time in force choices “GTC”, “DAY”, “GTD”.

	*/
	TimeInForce string
	/*TrailingStep
	  The trailing step for the stop rate.

	*/
	TrailingStep *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create entry order params
func (o *CreateEntryOrderParams) WithTimeout(timeout time.Duration) *CreateEntryOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create entry order params
func (o *CreateEntryOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create entry order params
func (o *CreateEntryOrderParams) WithContext(ctx context.Context) *CreateEntryOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create entry order params
func (o *CreateEntryOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create entry order params
func (o *CreateEntryOrderParams) WithHTTPClient(client *http.Client) *CreateEntryOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create entry order params
func (o *CreateEntryOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the create entry order params
func (o *CreateEntryOrderParams) WithAccountID(accountID string) *CreateEntryOrderParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the create entry order params
func (o *CreateEntryOrderParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithAmount adds the amount to the create entry order params
func (o *CreateEntryOrderParams) WithAmount(amount string) *CreateEntryOrderParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the create entry order params
func (o *CreateEntryOrderParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithBody adds the body to the create entry order params
func (o *CreateEntryOrderParams) WithBody(body models.EntryOrderRequestDefinition) *CreateEntryOrderParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create entry order params
func (o *CreateEntryOrderParams) SetBody(body models.EntryOrderRequestDefinition) {
	o.Body = body
}

// WithIsBuy adds the isBuy to the create entry order params
func (o *CreateEntryOrderParams) WithIsBuy(isBuy *bool) *CreateEntryOrderParams {
	o.SetIsBuy(isBuy)
	return o
}

// SetIsBuy adds the isBuy to the create entry order params
func (o *CreateEntryOrderParams) SetIsBuy(isBuy *bool) {
	o.IsBuy = isBuy
}

// WithIsInPips adds the isInPips to the create entry order params
func (o *CreateEntryOrderParams) WithIsInPips(isInPips *bool) *CreateEntryOrderParams {
	o.SetIsInPips(isInPips)
	return o
}

// SetIsInPips adds the isInPips to the create entry order params
func (o *CreateEntryOrderParams) SetIsInPips(isInPips *bool) {
	o.IsInPips = isInPips
}

// WithLimit adds the limit to the create entry order params
func (o *CreateEntryOrderParams) WithLimit(limit *float64) *CreateEntryOrderParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the create entry order params
func (o *CreateEntryOrderParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithOrderType adds the orderType to the create entry order params
func (o *CreateEntryOrderParams) WithOrderType(orderType string) *CreateEntryOrderParams {
	o.SetOrderType(orderType)
	return o
}

// SetOrderType adds the orderType to the create entry order params
func (o *CreateEntryOrderParams) SetOrderType(orderType string) {
	o.OrderType = orderType
}

// WithRate adds the rate to the create entry order params
func (o *CreateEntryOrderParams) WithRate(rate *float64) *CreateEntryOrderParams {
	o.SetRate(rate)
	return o
}

// SetRate adds the rate to the create entry order params
func (o *CreateEntryOrderParams) SetRate(rate *float64) {
	o.Rate = rate
}

// WithStop adds the stop to the create entry order params
func (o *CreateEntryOrderParams) WithStop(stop *float64) *CreateEntryOrderParams {
	o.SetStop(stop)
	return o
}

// SetStop adds the stop to the create entry order params
func (o *CreateEntryOrderParams) SetStop(stop *float64) {
	o.Stop = stop
}

// WithSymbol adds the symbol to the create entry order params
func (o *CreateEntryOrderParams) WithSymbol(symbol string) *CreateEntryOrderParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the create entry order params
func (o *CreateEntryOrderParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WithTimeInForce adds the timeInForce to the create entry order params
func (o *CreateEntryOrderParams) WithTimeInForce(timeInForce string) *CreateEntryOrderParams {
	o.SetTimeInForce(timeInForce)
	return o
}

// SetTimeInForce adds the timeInForce to the create entry order params
func (o *CreateEntryOrderParams) SetTimeInForce(timeInForce string) {
	o.TimeInForce = timeInForce
}

// WithTrailingStep adds the trailingStep to the create entry order params
func (o *CreateEntryOrderParams) WithTrailingStep(trailingStep *float64) *CreateEntryOrderParams {
	o.SetTrailingStep(trailingStep)
	return o
}

// SetTrailingStep adds the trailingStep to the create entry order params
func (o *CreateEntryOrderParams) SetTrailingStep(trailingStep *float64) {
	o.TrailingStep = trailingStep
}

// WriteToRequest writes these params to a swagger request
func (o *CreateEntryOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account_id
	qrAccountID := o.AccountID
	qAccountID := qrAccountID
	if qAccountID != "" {
		if err := r.SetQueryParam("account_id", qAccountID); err != nil {
			return err
		}
	}

	// query param amount
	qrAmount := o.Amount
	qAmount := qrAmount
	if qAmount != "" {
		if err := r.SetQueryParam("amount", qAmount); err != nil {
			return err
		}
	}

	if o.IsBuy != nil {

		// query param is_buy
		var qrIsBuy bool
		if o.IsBuy != nil {
			qrIsBuy = *o.IsBuy
		}
		qIsBuy := swag.FormatBool(qrIsBuy)
		if qIsBuy != "" {
			if err := r.SetQueryParam("is_buy", qIsBuy); err != nil {
				return err
			}
		}

	}

	if o.IsInPips != nil {

		// query param is_in_pips
		var qrIsInPips bool
		if o.IsInPips != nil {
			qrIsInPips = *o.IsInPips
		}
		qIsInPips := swag.FormatBool(qrIsInPips)
		if qIsInPips != "" {
			if err := r.SetQueryParam("is_in_pips", qIsInPips); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// query param order_type
	qrOrderType := o.OrderType
	qOrderType := qrOrderType
	if qOrderType != "" {
		if err := r.SetQueryParam("order_type", qOrderType); err != nil {
			return err
		}
	}

	if o.Rate != nil {

		// query param rate
		var qrRate float64
		if o.Rate != nil {
			qrRate = *o.Rate
		}
		qRate := swag.FormatFloat64(qrRate)
		if qRate != "" {
			if err := r.SetQueryParam("rate", qRate); err != nil {
				return err
			}
		}

	}

	if o.Stop != nil {

		// query param stop
		var qrStop float64
		if o.Stop != nil {
			qrStop = *o.Stop
		}
		qStop := swag.FormatFloat64(qrStop)
		if qStop != "" {
			if err := r.SetQueryParam("stop", qStop); err != nil {
				return err
			}
		}

	}

	// query param symbol
	qrSymbol := o.Symbol
	qSymbol := qrSymbol
	if qSymbol != "" {
		if err := r.SetQueryParam("symbol", qSymbol); err != nil {
			return err
		}
	}

	// query param time_in_force
	qrTimeInForce := o.TimeInForce
	qTimeInForce := qrTimeInForce
	if qTimeInForce != "" {
		if err := r.SetQueryParam("time_in_force", qTimeInForce); err != nil {
			return err
		}
	}

	if o.TrailingStep != nil {

		// query param trailing_step
		var qrTrailingStep float64
		if o.TrailingStep != nil {
			qrTrailingStep = *o.TrailingStep
		}
		qTrailingStep := swag.FormatFloat64(qrTrailingStep)
		if qTrailingStep != "" {
			if err := r.SetQueryParam("trailing_step", qTrailingStep); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewChangeOrderParams creates a new ChangeOrderParams object
// with the default values initialized.
func NewChangeOrderParams() *ChangeOrderParams {
	var ()
	return &ChangeOrderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeOrderParamsWithTimeout creates a new ChangeOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeOrderParamsWithTimeout(timeout time.Duration) *ChangeOrderParams {
	var ()
	return &ChangeOrderParams{

		timeout: timeout,
	}
}

// NewChangeOrderParamsWithContext creates a new ChangeOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeOrderParamsWithContext(ctx context.Context) *ChangeOrderParams {
	var ()
	return &ChangeOrderParams{

		Context: ctx,
	}
}

// NewChangeOrderParamsWithHTTPClient creates a new ChangeOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeOrderParamsWithHTTPClient(client *http.Client) *ChangeOrderParams {
	var ()
	return &ChangeOrderParams{
		HTTPClient: client,
	}
}

/*ChangeOrderParams contains all the parameters to send to the API endpoint
for the change order operation typically these are written to a http.Request
*/
type ChangeOrderParams struct {

	/*Amount
	  The trade‘s amount in lots.

	*/
	Amount string
	/*Body*/
	Body models.ChangeOrderRequestDefinition
	/*OrderID
	  The order identifier.

	*/
	OrderID string
	/*Range
	  The order‘s range (is used for “RangeEntry” orders only).

	*/
	Range *float64
	/*Rate
	  The trade‘s rate.

	*/
	Rate *float64
	/*TrailingStep
	  The trailing step for the stop rate.

	*/
	TrailingStep *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change order params
func (o *ChangeOrderParams) WithTimeout(timeout time.Duration) *ChangeOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change order params
func (o *ChangeOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change order params
func (o *ChangeOrderParams) WithContext(ctx context.Context) *ChangeOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change order params
func (o *ChangeOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change order params
func (o *ChangeOrderParams) WithHTTPClient(client *http.Client) *ChangeOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change order params
func (o *ChangeOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the change order params
func (o *ChangeOrderParams) WithAmount(amount string) *ChangeOrderParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the change order params
func (o *ChangeOrderParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithBody adds the body to the change order params
func (o *ChangeOrderParams) WithBody(body models.ChangeOrderRequestDefinition) *ChangeOrderParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the change order params
func (o *ChangeOrderParams) SetBody(body models.ChangeOrderRequestDefinition) {
	o.Body = body
}

// WithOrderID adds the orderID to the change order params
func (o *ChangeOrderParams) WithOrderID(orderID string) *ChangeOrderParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the change order params
func (o *ChangeOrderParams) SetOrderID(orderID string) {
	o.OrderID = orderID
}

// WithRange adds the rangeVar to the change order params
func (o *ChangeOrderParams) WithRange(rangeVar *float64) *ChangeOrderParams {
	o.SetRange(rangeVar)
	return o
}

// SetRange adds the range to the change order params
func (o *ChangeOrderParams) SetRange(rangeVar *float64) {
	o.Range = rangeVar
}

// WithRate adds the rate to the change order params
func (o *ChangeOrderParams) WithRate(rate *float64) *ChangeOrderParams {
	o.SetRate(rate)
	return o
}

// SetRate adds the rate to the change order params
func (o *ChangeOrderParams) SetRate(rate *float64) {
	o.Rate = rate
}

// WithTrailingStep adds the trailingStep to the change order params
func (o *ChangeOrderParams) WithTrailingStep(trailingStep *float64) *ChangeOrderParams {
	o.SetTrailingStep(trailingStep)
	return o
}

// SetTrailingStep adds the trailingStep to the change order params
func (o *ChangeOrderParams) SetTrailingStep(trailingStep *float64) {
	o.TrailingStep = trailingStep
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param amount
	qrAmount := o.Amount
	qAmount := qrAmount
	if qAmount != "" {
		if err := r.SetQueryParam("amount", qAmount); err != nil {
			return err
		}
	}

	// query param order_id
	qrOrderID := o.OrderID
	qOrderID := qrOrderID
	if qOrderID != "" {
		if err := r.SetQueryParam("order_id", qOrderID); err != nil {
			return err
		}
	}

	if o.Range != nil {

		// query param range
		var qrRange float64
		if o.Range != nil {
			qrRange = *o.Range
		}
		qRange := swag.FormatFloat64(qrRange)
		if qRange != "" {
			if err := r.SetQueryParam("range", qRange); err != nil {
				return err
			}
		}

	}

	if o.Rate != nil {

		// query param rate
		var qrRate float64
		if o.Rate != nil {
			qrRate = *o.Rate
		}
		qRate := swag.FormatFloat64(qrRate)
		if qRate != "" {
			if err := r.SetQueryParam("rate", qRate); err != nil {
				return err
			}
		}

	}

	if o.TrailingStep != nil {

		// query param trailing_step
		var qrTrailingStep float64
		if o.TrailingStep != nil {
			qrTrailingStep = *o.TrailingStep
		}
		qTrailingStep := swag.FormatFloat64(qrTrailingStep)
		if qTrailingStep != "" {
			if err := r.SetQueryParam("trailing_step", qTrailingStep); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

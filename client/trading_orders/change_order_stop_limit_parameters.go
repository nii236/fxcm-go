// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewChangeOrderStopLimitParams creates a new ChangeOrderStopLimitParams object
// with the default values initialized.
func NewChangeOrderStopLimitParams() *ChangeOrderStopLimitParams {
	var ()
	return &ChangeOrderStopLimitParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeOrderStopLimitParamsWithTimeout creates a new ChangeOrderStopLimitParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeOrderStopLimitParamsWithTimeout(timeout time.Duration) *ChangeOrderStopLimitParams {
	var ()
	return &ChangeOrderStopLimitParams{

		timeout: timeout,
	}
}

// NewChangeOrderStopLimitParamsWithContext creates a new ChangeOrderStopLimitParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeOrderStopLimitParamsWithContext(ctx context.Context) *ChangeOrderStopLimitParams {
	var ()
	return &ChangeOrderStopLimitParams{

		Context: ctx,
	}
}

// NewChangeOrderStopLimitParamsWithHTTPClient creates a new ChangeOrderStopLimitParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeOrderStopLimitParamsWithHTTPClient(client *http.Client) *ChangeOrderStopLimitParams {
	var ()
	return &ChangeOrderStopLimitParams{
		HTTPClient: client,
	}
}

/*ChangeOrderStopLimitParams contains all the parameters to send to the API endpoint
for the change order stop limit operation typically these are written to a http.Request
*/
type ChangeOrderStopLimitParams struct {

	/*Body*/
	Body models.ChangeOrderStopLimitRequestDefinition
	/*IsLimitInPips
	  Define if the trade's limit rate is in pips

	*/
	IsLimitInPips bool
	/*IsStopInPips
	  Define if the trade's stop rate is in pips

	*/
	IsStopInPips bool
	/*Limit
	  The trade‘s limit rate.

	*/
	Limit *float64
	/*OrderID
	  The order identifier.

	*/
	OrderID string
	/*Stop
	  The trade‘s stop rate.

	*/
	Stop *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithTimeout(timeout time.Duration) *ChangeOrderStopLimitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithContext(ctx context.Context) *ChangeOrderStopLimitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithHTTPClient(client *http.Client) *ChangeOrderStopLimitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithBody(body models.ChangeOrderStopLimitRequestDefinition) *ChangeOrderStopLimitParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetBody(body models.ChangeOrderStopLimitRequestDefinition) {
	o.Body = body
}

// WithIsLimitInPips adds the isLimitInPips to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithIsLimitInPips(isLimitInPips bool) *ChangeOrderStopLimitParams {
	o.SetIsLimitInPips(isLimitInPips)
	return o
}

// SetIsLimitInPips adds the isLimitInPips to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetIsLimitInPips(isLimitInPips bool) {
	o.IsLimitInPips = isLimitInPips
}

// WithIsStopInPips adds the isStopInPips to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithIsStopInPips(isStopInPips bool) *ChangeOrderStopLimitParams {
	o.SetIsStopInPips(isStopInPips)
	return o
}

// SetIsStopInPips adds the isStopInPips to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetIsStopInPips(isStopInPips bool) {
	o.IsStopInPips = isStopInPips
}

// WithLimit adds the limit to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithLimit(limit *float64) *ChangeOrderStopLimitParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithOrderID adds the orderID to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithOrderID(orderID string) *ChangeOrderStopLimitParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetOrderID(orderID string) {
	o.OrderID = orderID
}

// WithStop adds the stop to the change order stop limit params
func (o *ChangeOrderStopLimitParams) WithStop(stop *float64) *ChangeOrderStopLimitParams {
	o.SetStop(stop)
	return o
}

// SetStop adds the stop to the change order stop limit params
func (o *ChangeOrderStopLimitParams) SetStop(stop *float64) {
	o.Stop = stop
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeOrderStopLimitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param is_limit_in_pips
	qrIsLimitInPips := o.IsLimitInPips
	qIsLimitInPips := swag.FormatBool(qrIsLimitInPips)
	if qIsLimitInPips != "" {
		if err := r.SetQueryParam("is_limit_in_pips", qIsLimitInPips); err != nil {
			return err
		}
	}

	// query param is_stop_in_pips
	qrIsStopInPips := o.IsStopInPips
	qIsStopInPips := swag.FormatBool(qrIsStopInPips)
	if qIsStopInPips != "" {
		if err := r.SetQueryParam("is_stop_in_pips", qIsStopInPips); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// query param order_id
	qrOrderID := o.OrderID
	qOrderID := qrOrderID
	if qOrderID != "" {
		if err := r.SetQueryParam("order_id", qOrderID); err != nil {
			return err
		}
	}

	if o.Stop != nil {

		// query param stop
		var qrStop float64
		if o.Stop != nil {
			qrStop = *o.Stop
		}
		qStop := swag.FormatFloat64(qrStop)
		if qStop != "" {
			if err := r.SetQueryParam("stop", qStop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

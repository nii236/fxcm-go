// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewCloseTradeParams creates a new CloseTradeParams object
// with the default values initialized.
func NewCloseTradeParams() *CloseTradeParams {
	var ()
	return &CloseTradeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCloseTradeParamsWithTimeout creates a new CloseTradeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCloseTradeParamsWithTimeout(timeout time.Duration) *CloseTradeParams {
	var ()
	return &CloseTradeParams{

		timeout: timeout,
	}
}

// NewCloseTradeParamsWithContext creates a new CloseTradeParams object
// with the default values initialized, and the ability to set a context for a request
func NewCloseTradeParamsWithContext(ctx context.Context) *CloseTradeParams {
	var ()
	return &CloseTradeParams{

		Context: ctx,
	}
}

// NewCloseTradeParamsWithHTTPClient creates a new CloseTradeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCloseTradeParamsWithHTTPClient(client *http.Client) *CloseTradeParams {
	var ()
	return &CloseTradeParams{
		HTTPClient: client,
	}
}

/*CloseTradeParams contains all the parameters to send to the API endpoint
for the close trade operation typically these are written to a http.Request
*/
type CloseTradeParams struct {

	/*Amount
	  The trade‘s amount in lots.

	*/
	Amount string
	/*AtMarket
	  Defines the market range.

	*/
	AtMarket float64
	/*Body*/
	Body models.CloseTradeRequestDefinition
	/*OrderType
	  The type of the order execution. Market Order type choices “AtMarket”, “MarketRange”.

	*/
	OrderType string
	/*Rate
	  The trade‘s rate.

	*/
	Rate *float64
	/*TimeInForce
	  Time in force choices “IOC”, “GTC”, “FOK”, “DAY”, “GTD”.

	*/
	TimeInForce string
	/*TradeID
	  The trade identifier

	*/
	TradeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the close trade params
func (o *CloseTradeParams) WithTimeout(timeout time.Duration) *CloseTradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the close trade params
func (o *CloseTradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the close trade params
func (o *CloseTradeParams) WithContext(ctx context.Context) *CloseTradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the close trade params
func (o *CloseTradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the close trade params
func (o *CloseTradeParams) WithHTTPClient(client *http.Client) *CloseTradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the close trade params
func (o *CloseTradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the close trade params
func (o *CloseTradeParams) WithAmount(amount string) *CloseTradeParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the close trade params
func (o *CloseTradeParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithAtMarket adds the atMarket to the close trade params
func (o *CloseTradeParams) WithAtMarket(atMarket float64) *CloseTradeParams {
	o.SetAtMarket(atMarket)
	return o
}

// SetAtMarket adds the atMarket to the close trade params
func (o *CloseTradeParams) SetAtMarket(atMarket float64) {
	o.AtMarket = atMarket
}

// WithBody adds the body to the close trade params
func (o *CloseTradeParams) WithBody(body models.CloseTradeRequestDefinition) *CloseTradeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the close trade params
func (o *CloseTradeParams) SetBody(body models.CloseTradeRequestDefinition) {
	o.Body = body
}

// WithOrderType adds the orderType to the close trade params
func (o *CloseTradeParams) WithOrderType(orderType string) *CloseTradeParams {
	o.SetOrderType(orderType)
	return o
}

// SetOrderType adds the orderType to the close trade params
func (o *CloseTradeParams) SetOrderType(orderType string) {
	o.OrderType = orderType
}

// WithRate adds the rate to the close trade params
func (o *CloseTradeParams) WithRate(rate *float64) *CloseTradeParams {
	o.SetRate(rate)
	return o
}

// SetRate adds the rate to the close trade params
func (o *CloseTradeParams) SetRate(rate *float64) {
	o.Rate = rate
}

// WithTimeInForce adds the timeInForce to the close trade params
func (o *CloseTradeParams) WithTimeInForce(timeInForce string) *CloseTradeParams {
	o.SetTimeInForce(timeInForce)
	return o
}

// SetTimeInForce adds the timeInForce to the close trade params
func (o *CloseTradeParams) SetTimeInForce(timeInForce string) {
	o.TimeInForce = timeInForce
}

// WithTradeID adds the tradeID to the close trade params
func (o *CloseTradeParams) WithTradeID(tradeID string) *CloseTradeParams {
	o.SetTradeID(tradeID)
	return o
}

// SetTradeID adds the tradeId to the close trade params
func (o *CloseTradeParams) SetTradeID(tradeID string) {
	o.TradeID = tradeID
}

// WriteToRequest writes these params to a swagger request
func (o *CloseTradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param amount
	qrAmount := o.Amount
	qAmount := qrAmount
	if qAmount != "" {
		if err := r.SetQueryParam("amount", qAmount); err != nil {
			return err
		}
	}

	// query param at_market
	qrAtMarket := o.AtMarket
	qAtMarket := swag.FormatFloat64(qrAtMarket)
	if qAtMarket != "" {
		if err := r.SetQueryParam("at_market", qAtMarket); err != nil {
			return err
		}
	}

	// query param order_type
	qrOrderType := o.OrderType
	qOrderType := qrOrderType
	if qOrderType != "" {
		if err := r.SetQueryParam("order_type", qOrderType); err != nil {
			return err
		}
	}

	if o.Rate != nil {

		// query param rate
		var qrRate float64
		if o.Rate != nil {
			qrRate = *o.Rate
		}
		qRate := swag.FormatFloat64(qrRate)
		if qRate != "" {
			if err := r.SetQueryParam("rate", qRate); err != nil {
				return err
			}
		}

	}

	// query param time_in_force
	qrTimeInForce := o.TimeInForce
	qTimeInForce := qrTimeInForce
	if qTimeInForce != "" {
		if err := r.SetQueryParam("time_in_force", qTimeInForce); err != nil {
			return err
		}
	}

	// query param trade_id
	qrTradeID := o.TradeID
	qTradeID := qrTradeID
	if qTradeID != "" {
		if err := r.SetQueryParam("trade_id", qTradeID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

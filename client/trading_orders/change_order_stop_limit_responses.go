// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// ChangeOrderStopLimitReader is a Reader for the ChangeOrderStopLimit structure.
type ChangeOrderStopLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeOrderStopLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangeOrderStopLimitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewChangeOrderStopLimitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewChangeOrderStopLimitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChangeOrderStopLimitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangeOrderStopLimitOK creates a ChangeOrderStopLimitOK with default headers values
func NewChangeOrderStopLimitOK() *ChangeOrderStopLimitOK {
	return &ChangeOrderStopLimitOK{}
}

/*ChangeOrderStopLimitOK handles this case with default header values.

OK
*/
type ChangeOrderStopLimitOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *ChangeOrderStopLimitOK) Error() string {
	return fmt.Sprintf("[POST /trading/change_order_stop_limit][%d] changeOrderStopLimitOK  %+v", 200, o.Payload)
}

func (o *ChangeOrderStopLimitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderStopLimitUnauthorized creates a ChangeOrderStopLimitUnauthorized with default headers values
func NewChangeOrderStopLimitUnauthorized() *ChangeOrderStopLimitUnauthorized {
	return &ChangeOrderStopLimitUnauthorized{}
}

/*ChangeOrderStopLimitUnauthorized handles this case with default header values.

Unauthorized
*/
type ChangeOrderStopLimitUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *ChangeOrderStopLimitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/change_order_stop_limit][%d] changeOrderStopLimitUnauthorized  %+v", 401, o.Payload)
}

func (o *ChangeOrderStopLimitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderStopLimitForbidden creates a ChangeOrderStopLimitForbidden with default headers values
func NewChangeOrderStopLimitForbidden() *ChangeOrderStopLimitForbidden {
	return &ChangeOrderStopLimitForbidden{}
}

/*ChangeOrderStopLimitForbidden handles this case with default header values.

Forbidden
*/
type ChangeOrderStopLimitForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *ChangeOrderStopLimitForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/change_order_stop_limit][%d] changeOrderStopLimitForbidden  %+v", 403, o.Payload)
}

func (o *ChangeOrderStopLimitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderStopLimitNotFound creates a ChangeOrderStopLimitNotFound with default headers values
func NewChangeOrderStopLimitNotFound() *ChangeOrderStopLimitNotFound {
	return &ChangeOrderStopLimitNotFound{}
}

/*ChangeOrderStopLimitNotFound handles this case with default header values.

Not found
*/
type ChangeOrderStopLimitNotFound struct {
	Payload *models.Error404NotFound
}

func (o *ChangeOrderStopLimitNotFound) Error() string {
	return fmt.Sprintf("[POST /trading/change_order_stop_limit][%d] changeOrderStopLimitNotFound  %+v", 404, o.Payload)
}

func (o *ChangeOrderStopLimitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// ChangeOrderReader is a Reader for the ChangeOrder structure.
type ChangeOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangeOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewChangeOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewChangeOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChangeOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangeOrderOK creates a ChangeOrderOK with default headers values
func NewChangeOrderOK() *ChangeOrderOK {
	return &ChangeOrderOK{}
}

/*ChangeOrderOK handles this case with default header values.

OK
*/
type ChangeOrderOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *ChangeOrderOK) Error() string {
	return fmt.Sprintf("[POST /trading/change_order][%d] changeOrderOK  %+v", 200, o.Payload)
}

func (o *ChangeOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderUnauthorized creates a ChangeOrderUnauthorized with default headers values
func NewChangeOrderUnauthorized() *ChangeOrderUnauthorized {
	return &ChangeOrderUnauthorized{}
}

/*ChangeOrderUnauthorized handles this case with default header values.

Unauthorized
*/
type ChangeOrderUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *ChangeOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/change_order][%d] changeOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *ChangeOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderForbidden creates a ChangeOrderForbidden with default headers values
func NewChangeOrderForbidden() *ChangeOrderForbidden {
	return &ChangeOrderForbidden{}
}

/*ChangeOrderForbidden handles this case with default header values.

Forbidden
*/
type ChangeOrderForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *ChangeOrderForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/change_order][%d] changeOrderForbidden  %+v", 403, o.Payload)
}

func (o *ChangeOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeOrderNotFound creates a ChangeOrderNotFound with default headers values
func NewChangeOrderNotFound() *ChangeOrderNotFound {
	return &ChangeOrderNotFound{}
}

/*ChangeOrderNotFound handles this case with default header values.

Not found
*/
type ChangeOrderNotFound struct {
	Payload *models.Error404NotFound
}

func (o *ChangeOrderNotFound) Error() string {
	return fmt.Sprintf("[POST /trading/change_order][%d] changeOrderNotFound  %+v", 404, o.Payload)
}

func (o *ChangeOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

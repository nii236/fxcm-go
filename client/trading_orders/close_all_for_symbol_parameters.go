// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewCloseAllForSymbolParams creates a new CloseAllForSymbolParams object
// with the default values initialized.
func NewCloseAllForSymbolParams() *CloseAllForSymbolParams {
	var ()
	return &CloseAllForSymbolParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCloseAllForSymbolParamsWithTimeout creates a new CloseAllForSymbolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCloseAllForSymbolParamsWithTimeout(timeout time.Duration) *CloseAllForSymbolParams {
	var ()
	return &CloseAllForSymbolParams{

		timeout: timeout,
	}
}

// NewCloseAllForSymbolParamsWithContext creates a new CloseAllForSymbolParams object
// with the default values initialized, and the ability to set a context for a request
func NewCloseAllForSymbolParamsWithContext(ctx context.Context) *CloseAllForSymbolParams {
	var ()
	return &CloseAllForSymbolParams{

		Context: ctx,
	}
}

// NewCloseAllForSymbolParamsWithHTTPClient creates a new CloseAllForSymbolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCloseAllForSymbolParamsWithHTTPClient(client *http.Client) *CloseAllForSymbolParams {
	var ()
	return &CloseAllForSymbolParams{
		HTTPClient: client,
	}
}

/*CloseAllForSymbolParams contains all the parameters to send to the API endpoint
for the close all for symbol operation typically these are written to a http.Request
*/
type CloseAllForSymbolParams struct {

	/*AccountID
	  The trade‘s account identifier

	*/
	AccountID string
	/*Body*/
	Body models.CloseForAllSymbolsRequestDefinition
	/*ForSymbol
	  Defines if trades should be closed for the specified symbol.

	*/
	ForSymbol bool
	/*OrderType
	  The type of the order execution. Market Order type choices “AtMarket”, “MarketRange”.

	*/
	OrderType string
	/*Symbol
	  The trade‘s account identifier

	*/
	Symbol string
	/*TimeInForce
	  Time in force choices “IOC”, “GTC”, “FOK”, “DAY”, “GTD”.

	*/
	TimeInForce string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the close all for symbol params
func (o *CloseAllForSymbolParams) WithTimeout(timeout time.Duration) *CloseAllForSymbolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the close all for symbol params
func (o *CloseAllForSymbolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the close all for symbol params
func (o *CloseAllForSymbolParams) WithContext(ctx context.Context) *CloseAllForSymbolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the close all for symbol params
func (o *CloseAllForSymbolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the close all for symbol params
func (o *CloseAllForSymbolParams) WithHTTPClient(client *http.Client) *CloseAllForSymbolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the close all for symbol params
func (o *CloseAllForSymbolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the close all for symbol params
func (o *CloseAllForSymbolParams) WithAccountID(accountID string) *CloseAllForSymbolParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the close all for symbol params
func (o *CloseAllForSymbolParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithBody adds the body to the close all for symbol params
func (o *CloseAllForSymbolParams) WithBody(body models.CloseForAllSymbolsRequestDefinition) *CloseAllForSymbolParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the close all for symbol params
func (o *CloseAllForSymbolParams) SetBody(body models.CloseForAllSymbolsRequestDefinition) {
	o.Body = body
}

// WithForSymbol adds the forSymbol to the close all for symbol params
func (o *CloseAllForSymbolParams) WithForSymbol(forSymbol bool) *CloseAllForSymbolParams {
	o.SetForSymbol(forSymbol)
	return o
}

// SetForSymbol adds the forSymbol to the close all for symbol params
func (o *CloseAllForSymbolParams) SetForSymbol(forSymbol bool) {
	o.ForSymbol = forSymbol
}

// WithOrderType adds the orderType to the close all for symbol params
func (o *CloseAllForSymbolParams) WithOrderType(orderType string) *CloseAllForSymbolParams {
	o.SetOrderType(orderType)
	return o
}

// SetOrderType adds the orderType to the close all for symbol params
func (o *CloseAllForSymbolParams) SetOrderType(orderType string) {
	o.OrderType = orderType
}

// WithSymbol adds the symbol to the close all for symbol params
func (o *CloseAllForSymbolParams) WithSymbol(symbol string) *CloseAllForSymbolParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the close all for symbol params
func (o *CloseAllForSymbolParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WithTimeInForce adds the timeInForce to the close all for symbol params
func (o *CloseAllForSymbolParams) WithTimeInForce(timeInForce string) *CloseAllForSymbolParams {
	o.SetTimeInForce(timeInForce)
	return o
}

// SetTimeInForce adds the timeInForce to the close all for symbol params
func (o *CloseAllForSymbolParams) SetTimeInForce(timeInForce string) {
	o.TimeInForce = timeInForce
}

// WriteToRequest writes these params to a swagger request
func (o *CloseAllForSymbolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account_id
	qrAccountID := o.AccountID
	qAccountID := qrAccountID
	if qAccountID != "" {
		if err := r.SetQueryParam("account_id", qAccountID); err != nil {
			return err
		}
	}

	// query param forSymbol
	qrForSymbol := o.ForSymbol
	qForSymbol := swag.FormatBool(qrForSymbol)
	if qForSymbol != "" {
		if err := r.SetQueryParam("forSymbol", qForSymbol); err != nil {
			return err
		}
	}

	// query param order_type
	qrOrderType := o.OrderType
	qOrderType := qrOrderType
	if qOrderType != "" {
		if err := r.SetQueryParam("order_type", qOrderType); err != nil {
			return err
		}
	}

	// query param symbol
	qrSymbol := o.Symbol
	qSymbol := qrSymbol
	if qSymbol != "" {
		if err := r.SetQueryParam("symbol", qSymbol); err != nil {
			return err
		}
	}

	// query param time_in_force
	qrTimeInForce := o.TimeInForce
	qTimeInForce := qrTimeInForce
	if qTimeInForce != "" {
		if err := r.SetQueryParam("time_in_force", qTimeInForce); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

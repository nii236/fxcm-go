// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// SimpleOCOReader is a Reader for the SimpleOCO structure.
type SimpleOCOReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SimpleOCOReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSimpleOCOOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewSimpleOCOUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSimpleOCOForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSimpleOCONotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSimpleOCOOK creates a SimpleOCOOK with default headers values
func NewSimpleOCOOK() *SimpleOCOOK {
	return &SimpleOCOOK{}
}

/*SimpleOCOOK handles this case with default header values.

OK
*/
type SimpleOCOOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *SimpleOCOOK) Error() string {
	return fmt.Sprintf("[POST /trading/simple_oco][%d] simpleOCOOK  %+v", 200, o.Payload)
}

func (o *SimpleOCOOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleOCOUnauthorized creates a SimpleOCOUnauthorized with default headers values
func NewSimpleOCOUnauthorized() *SimpleOCOUnauthorized {
	return &SimpleOCOUnauthorized{}
}

/*SimpleOCOUnauthorized handles this case with default header values.

Unauthorized
*/
type SimpleOCOUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *SimpleOCOUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/simple_oco][%d] simpleOCOUnauthorized  %+v", 401, o.Payload)
}

func (o *SimpleOCOUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleOCOForbidden creates a SimpleOCOForbidden with default headers values
func NewSimpleOCOForbidden() *SimpleOCOForbidden {
	return &SimpleOCOForbidden{}
}

/*SimpleOCOForbidden handles this case with default header values.

Forbidden
*/
type SimpleOCOForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *SimpleOCOForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/simple_oco][%d] simpleOCOForbidden  %+v", 403, o.Payload)
}

func (o *SimpleOCOForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleOCONotFound creates a SimpleOCONotFound with default headers values
func NewSimpleOCONotFound() *SimpleOCONotFound {
	return &SimpleOCONotFound{}
}

/*SimpleOCONotFound handles this case with default header values.

Not found
*/
type SimpleOCONotFound struct {
	Payload *models.Error404NotFound
}

func (o *SimpleOCONotFound) Error() string {
	return fmt.Sprintf("[POST /trading/simple_oco][%d] simpleOCONotFound  %+v", 404, o.Payload)
}

func (o *SimpleOCONotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// CloseAllForSymbolReader is a Reader for the CloseAllForSymbol structure.
type CloseAllForSymbolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloseAllForSymbolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCloseAllForSymbolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCloseAllForSymbolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCloseAllForSymbolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCloseAllForSymbolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCloseAllForSymbolOK creates a CloseAllForSymbolOK with default headers values
func NewCloseAllForSymbolOK() *CloseAllForSymbolOK {
	return &CloseAllForSymbolOK{}
}

/*CloseAllForSymbolOK handles this case with default header values.

OK
*/
type CloseAllForSymbolOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *CloseAllForSymbolOK) Error() string {
	return fmt.Sprintf("[POST /trading/close_all_for_symbol][%d] closeAllForSymbolOK  %+v", 200, o.Payload)
}

func (o *CloseAllForSymbolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseAllForSymbolUnauthorized creates a CloseAllForSymbolUnauthorized with default headers values
func NewCloseAllForSymbolUnauthorized() *CloseAllForSymbolUnauthorized {
	return &CloseAllForSymbolUnauthorized{}
}

/*CloseAllForSymbolUnauthorized handles this case with default header values.

Unauthorized
*/
type CloseAllForSymbolUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *CloseAllForSymbolUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/close_all_for_symbol][%d] closeAllForSymbolUnauthorized  %+v", 401, o.Payload)
}

func (o *CloseAllForSymbolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseAllForSymbolForbidden creates a CloseAllForSymbolForbidden with default headers values
func NewCloseAllForSymbolForbidden() *CloseAllForSymbolForbidden {
	return &CloseAllForSymbolForbidden{}
}

/*CloseAllForSymbolForbidden handles this case with default header values.

Forbidden
*/
type CloseAllForSymbolForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *CloseAllForSymbolForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/close_all_for_symbol][%d] closeAllForSymbolForbidden  %+v", 403, o.Payload)
}

func (o *CloseAllForSymbolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseAllForSymbolNotFound creates a CloseAllForSymbolNotFound with default headers values
func NewCloseAllForSymbolNotFound() *CloseAllForSymbolNotFound {
	return &CloseAllForSymbolNotFound{}
}

/*CloseAllForSymbolNotFound handles this case with default header values.

Not found
*/
type CloseAllForSymbolNotFound struct {
	Payload *models.Error404NotFound
}

func (o *CloseAllForSymbolNotFound) Error() string {
	return fmt.Sprintf("[POST /trading/close_all_for_symbol][%d] closeAllForSymbolNotFound  %+v", 404, o.Payload)
}

func (o *CloseAllForSymbolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package trading_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// EditOCOReader is a Reader for the EditOCO structure.
type EditOCOReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditOCOReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEditOCOOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewEditOCOUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewEditOCOForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEditOCONotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditOCOOK creates a EditOCOOK with default headers values
func NewEditOCOOK() *EditOCOOK {
	return &EditOCOOK{}
}

/*EditOCOOK handles this case with default header values.

OK
*/
type EditOCOOK struct {
	Payload *models.TraderOrdersResponseDefinition
}

func (o *EditOCOOK) Error() string {
	return fmt.Sprintf("[POST /trading/edit_oco][%d] editOCOOK  %+v", 200, o.Payload)
}

func (o *EditOCOOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraderOrdersResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditOCOUnauthorized creates a EditOCOUnauthorized with default headers values
func NewEditOCOUnauthorized() *EditOCOUnauthorized {
	return &EditOCOUnauthorized{}
}

/*EditOCOUnauthorized handles this case with default header values.

Unauthorized
*/
type EditOCOUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *EditOCOUnauthorized) Error() string {
	return fmt.Sprintf("[POST /trading/edit_oco][%d] editOCOUnauthorized  %+v", 401, o.Payload)
}

func (o *EditOCOUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditOCOForbidden creates a EditOCOForbidden with default headers values
func NewEditOCOForbidden() *EditOCOForbidden {
	return &EditOCOForbidden{}
}

/*EditOCOForbidden handles this case with default header values.

Forbidden
*/
type EditOCOForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *EditOCOForbidden) Error() string {
	return fmt.Sprintf("[POST /trading/edit_oco][%d] editOCOForbidden  %+v", 403, o.Payload)
}

func (o *EditOCOForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditOCONotFound creates a EditOCONotFound with default headers values
func NewEditOCONotFound() *EditOCONotFound {
	return &EditOCONotFound{}
}

/*EditOCONotFound handles this case with default header values.

Not found
*/
type EditOCONotFound struct {
	Payload *models.Error404NotFound
}

func (o *EditOCONotFound) Error() string {
	return fmt.Sprintf("[POST /trading/edit_oco][%d] editOCONotFound  %+v", 404, o.Payload)
}

func (o *EditOCONotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

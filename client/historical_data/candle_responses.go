// Code generated by go-swagger; DO NOT EDIT.

package historical_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// CandleReader is a Reader for the Candle structure.
type CandleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CandleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCandleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCandleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCandleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCandleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCandleOK creates a CandleOK with default headers values
func NewCandleOK() *CandleOK {
	return &CandleOK{}
}

/*CandleOK handles this case with default header values.

OK
*/
type CandleOK struct {
	Payload *models.CandleResponseDefinition
}

func (o *CandleOK) Error() string {
	return fmt.Sprintf("[GET /candles/{offer_id}/{period_id}][%d] candleOK  %+v", 200, o.Payload)
}

func (o *CandleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CandleResponseDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCandleUnauthorized creates a CandleUnauthorized with default headers values
func NewCandleUnauthorized() *CandleUnauthorized {
	return &CandleUnauthorized{}
}

/*CandleUnauthorized handles this case with default header values.

Unauthorized
*/
type CandleUnauthorized struct {
	Payload *models.Error401Unauthorized
}

func (o *CandleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /candles/{offer_id}/{period_id}][%d] candleUnauthorized  %+v", 401, o.Payload)
}

func (o *CandleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error401Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCandleForbidden creates a CandleForbidden with default headers values
func NewCandleForbidden() *CandleForbidden {
	return &CandleForbidden{}
}

/*CandleForbidden handles this case with default header values.

Forbidden
*/
type CandleForbidden struct {
	Payload *models.Error403Forbidden
}

func (o *CandleForbidden) Error() string {
	return fmt.Sprintf("[GET /candles/{offer_id}/{period_id}][%d] candleForbidden  %+v", 403, o.Payload)
}

func (o *CandleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error403Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCandleNotFound creates a CandleNotFound with default headers values
func NewCandleNotFound() *CandleNotFound {
	return &CandleNotFound{}
}

/*CandleNotFound handles this case with default header values.

Not found
*/
type CandleNotFound struct {
	Payload *models.Error404NotFound
}

func (o *CandleNotFound) Error() string {
	return fmt.Sprintf("[GET /candles/{offer_id}/{period_id}][%d] candleNotFound  %+v", 404, o.Payload)
}

func (o *CandleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error404NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

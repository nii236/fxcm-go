// Code generated by go-swagger; DO NOT EDIT.

package historical_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/nii236/fxcm-go/models"
)

// NewCandleParams creates a new CandleParams object
// with the default values initialized.
func NewCandleParams() *CandleParams {
	var ()
	return &CandleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCandleParamsWithTimeout creates a new CandleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCandleParamsWithTimeout(timeout time.Duration) *CandleParams {
	var ()
	return &CandleParams{

		timeout: timeout,
	}
}

// NewCandleParamsWithContext creates a new CandleParams object
// with the default values initialized, and the ability to set a context for a request
func NewCandleParamsWithContext(ctx context.Context) *CandleParams {
	var ()
	return &CandleParams{

		Context: ctx,
	}
}

// NewCandleParamsWithHTTPClient creates a new CandleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCandleParamsWithHTTPClient(client *http.Client) *CandleParams {
	var ()
	return &CandleParams{
		HTTPClient: client,
	}
}

/*CandleParams contains all the parameters to send to the API endpoint
for the candle operation typically these are written to a http.Request
*/
type CandleParams struct {

	/*Body*/
	Body models.HistoricalDataRequestDefinition
	/*From
	  Beginning of time range

	*/
	From *bool
	/*Num
	  Number of candles requested

	*/
	Num float64
	/*OfferID
	  Integer from Offer trading table

	*/
	OfferID float64
	/*PeriodID
	  String, one of m1,m5,m15,m30,H1,H2,H3,H4,H6,H8,D1,W1,M1

	*/
	PeriodID string
	/*To
	  End of time range

	*/
	To *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the candle params
func (o *CandleParams) WithTimeout(timeout time.Duration) *CandleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the candle params
func (o *CandleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the candle params
func (o *CandleParams) WithContext(ctx context.Context) *CandleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the candle params
func (o *CandleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the candle params
func (o *CandleParams) WithHTTPClient(client *http.Client) *CandleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the candle params
func (o *CandleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the candle params
func (o *CandleParams) WithBody(body models.HistoricalDataRequestDefinition) *CandleParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the candle params
func (o *CandleParams) SetBody(body models.HistoricalDataRequestDefinition) {
	o.Body = body
}

// WithFrom adds the from to the candle params
func (o *CandleParams) WithFrom(from *bool) *CandleParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the candle params
func (o *CandleParams) SetFrom(from *bool) {
	o.From = from
}

// WithNum adds the num to the candle params
func (o *CandleParams) WithNum(num float64) *CandleParams {
	o.SetNum(num)
	return o
}

// SetNum adds the num to the candle params
func (o *CandleParams) SetNum(num float64) {
	o.Num = num
}

// WithOfferID adds the offerID to the candle params
func (o *CandleParams) WithOfferID(offerID float64) *CandleParams {
	o.SetOfferID(offerID)
	return o
}

// SetOfferID adds the offerId to the candle params
func (o *CandleParams) SetOfferID(offerID float64) {
	o.OfferID = offerID
}

// WithPeriodID adds the periodID to the candle params
func (o *CandleParams) WithPeriodID(periodID string) *CandleParams {
	o.SetPeriodID(periodID)
	return o
}

// SetPeriodID adds the periodId to the candle params
func (o *CandleParams) SetPeriodID(periodID string) {
	o.PeriodID = periodID
}

// WithTo adds the to to the candle params
func (o *CandleParams) WithTo(to *bool) *CandleParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the candle params
func (o *CandleParams) SetTo(to *bool) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *CandleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom bool
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatBool(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// query param num
	qrNum := o.Num
	qNum := swag.FormatFloat64(qrNum)
	if qNum != "" {
		if err := r.SetQueryParam("num", qNum); err != nil {
			return err
		}
	}

	// path param offer_id
	if err := r.SetPathParam("offer_id", swag.FormatFloat64(o.OfferID)); err != nil {
		return err
	}

	// path param period_id
	if err := r.SetPathParam("period_id", o.PeriodID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo bool
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatBool(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

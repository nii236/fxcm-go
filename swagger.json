{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.fxcm.com",
  "info": {
    "description": "The firm's REST API is a web-based API using a Websocket connection. Developers and investors will be able to utilize the API irrespective of operating system, to create custom trading applications, integrate them in FXCM's platforms, back testÂ  and create automated trading strategies. \n\nOverview\n===============\nOur REST API is a web-based API using a Websocket connection and was developed with algorithmic trading in mind. \n\nDevelopers and investors can create custom trading applications, integrate into our platform, back test strategies and build robot trading. Calls can be made in any language that supports a standard HTTP. \n\nWe utilize the new OAuth 2.0 specification for authentication via token. This allows for a more secure authorization to access your application and can easily be integrated with web applications, mobile devices, and desktop platforms.\n\nWith the use of the socket.io library, the API has streaming capability and will push data notifications in a JSON format. Your application will have access to our real-time streaming market data, subscribe in real time access to trading tables and place live trades.\n\nWe provide Python wrapper that can be easily integrated with Jupyter Notebook.\n\nWe also provide real case study on how to use FXCM data to build and back test strategies on popular platforms BT Analysis, QSTrader, Zipline and QuantConnect.\n\n\nOur thriving community of developers on GitHub is a rich resource where ideas and information are freely shared and improved upon. We encourage everyone to participate and provide feedback to the community. Click here to sign up and get access to our [API repositories](https://github.com/FXCMAPI) on GitHub.\n\nGetting Started\n===============\nTo begin using our API, you will need the following:\n1.\tAn FXCM account. You can apply for a demo account [here](https://www.fxcm.com/uk/forex-trading-demo/).\n2.\tA persistent access token. You can generate one from the [Trading Station web](https://tradingstation.fxcm.com/). Click on User Account > Token Management on the upper right hand of the website. Please send your username to api@fxcm.com, we will need to enable Rest API access. \n3. Download Rest API PDF documents at [here](https://apiwiki.fxcorporate.com/api/RestAPI/Socket%20REST%20API%20Specs.pdf). \n4. Start coding. You will need to reference the [socket.io library](https://socket.io/docs/client-api/) in your code. a. Using Javascript, click [here](https://www.npmjs.com/package/socket.io) b. Using Python, click [here](https://pypi.python.org/pypi/socketIO-client)\n5. Sample code for Python at [here](https://github.com/fxcm/fxcm-api-rest-python3-example)\n6. Sample code for Java Script at [here](https://github.com/fxcm/fxcm-api-rest-nodejs-example)\n7. Sample code in Netbeans Maven project at [here](https://apiwiki.fxcorporate.com/api/RestAPI/JavaRestClient.zip)\n",
    "version": "1.0.1",
    "title": "FXCM Socket REST",
    "termsOfService": "UNKNOWN",
    "contact": {
      "email": "api@fxcm.com",
      "url": "https://www.fxcm.com"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Market Data",
      "description": "This section deals with streaming real-time pricing information."
    },
    {
      "name": "Trading Tables",
      "description": "This section deals with accessing trading information tables."
    },
    {
      "name": "Trading Orders",
      "description": "This section deals with trading requests."
    },
    {
      "name": "Historical Data",
      "description": "Allow user to retrieve candles for a given instrument at a given time frame. If time range is specified, number of candles parameter is ignored, but still required."
    },
    {
      "name": "Real Case Study",
      "description": "Here are the real case studies that connect RestAPI via Python. \n\n1. Learn how to run BT backtest on FXCM historical data via RestAPI at [here](https://apiwiki.fxcorporate.com/api/StrategyRealCaseStudy/RestAPI/BT%20strategy%20on%20FXCM%20data.zip). What is [bt](http://pmorissette.github.io/bt/). \n\n2.Learn how to run QSTrader on FXCM data via RestAPI at [here](https://apiwiki.fxcorporate.com/api/StrategyRealCaseStudy/RestAPI/QSTrader%20on%20FXCM%20data.zip). what is [QSTrader](https://www.quantstart.com/qstrader).\n\n\n3.Building/back testing RSI strategy via RestAPI at [here](https://apiwiki.fxcorporate.com/api/StrategyRealCaseStudy/RestAPI/RsiStrategy.zip). \n\n4.One video demonstrate how to backtest strategies in Visual Studio via FXCM data On QuantConnect LEAN platform at [here](https://www.youtube.com/watch?v=m6llfznP4d4).\n"
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "description": "REST API uses a persistent Access Token. You can generate this token by logging into Trading Station Web at [here](https://tradingstation.fxcm.com/).  Clients should establish a persistent WebSocket connection using socket.io library. All non-solicited updates will be sent over this connection. Client requests are to be sent via normal HTTP messages.",
      "type": "apiKey",
      "in": "query",
      "name": "access_token"
    }
  },
  "paths": {
    "/subscribe": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market data subscription",
        "description": "After subscribing, market price updates will be pushed to the client via the socket",
        "operationId": "marketData/subscribeMarketData",
        "parameters": [
          {
            "$ref": "#/parameters/userAgent"
          },
          {
            "$ref": "#/parameters/accept"
          },
          {
            "$ref": "#/parameters/contentType"
          },
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeMarketDataRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "pairs": "EUR/USD"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true,
                  "error": ""
                },
                "pairs": {
                  "Updated": 1501275479,
                  "Rates": [
                    1.17481,
                    1.17513,
                    1.17653,
                    1.167,
                    1.17481,
                    1.17513
                  ],
                  "Symbol": "EUR/USD"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscribeMarketDataResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/unsubscribe": {
      "post": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market data unsubscription",
        "description": "unsubscribe market data",
        "operationId": "marketData/unsubscribeMarketData",
        "parameters": [
          {
            "$ref": "#/parameters/userAgent"
          },
          {
            "$ref": "#/parameters/accept"
          },
          {
            "$ref": "#/parameters/contentType"
          },
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnsubscribeMarketDataRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "pairs": "EUR/USD"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true,
                  "error": ""
                },
                "pairs": "EUR/USD"
              }
            },
            "schema": {
              "$ref": "#/definitions/UnsubscribeMarketDataResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/subscribe": {
      "post": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Subscribe to trading tables",
        "description": "Subscribes to the updates of the data models. Update will be pushed to client via the socket.",
        "operationId": "tradingTable/subscribeTradingTable",
        "parameters": [
          {
            "$ref": "#/parameters/userAgent"
          },
          {
            "$ref": "#/parameters/accept"
          },
          {
            "$ref": "#/parameters/contentType"
          },
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeTradingTablesDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Order"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscribeTradingTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/unsubscribe": {
      "post": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Unsubscribe from trading tables",
        "description": "Subscribes to the updates of the data models. Update will be pushed to client via the socket.",
        "operationId": "tradingTable/unsubscribeTradingTable",
        "parameters": [
          {
            "$ref": "#/parameters/userAgent"
          },
          {
            "$ref": "#/parameters/accept"
          },
          {
            "$ref": "#/parameters/contentType"
          },
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnsubscribeTradingTablesDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Order"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/UnsubscribeTradingTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=Offer": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of offer",
        "description": "the Offers table that contains information about trading instruments, current prices, and high/low trading day prices.",
        "operationId": "tradingTable/OfferTable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Offer"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "offers": [
                    {
                      "t": 0,
                      "ratePrecision": 5,
                      "offerId": 1,
                      "rollB": -2.208,
                      "rollS": 1.053,
                      "fractionDigits": 5,
                      "pip": 0.0001,
                      "defaultSortOrder": 100,
                      "currency": "EUR/USD",
                      "instrumentType": 1,
                      "valueDate": "09152017",
                      "time": "2017-09-13T15:26:49.000Z",
                      "sell": 1.18983,
                      "buy": 1.19008,
                      "sellTradable": true,
                      "buyTradable": true,
                      "high": 1.19962,
                      "low": 1.18977,
                      "volume": 1,
                      "pipFraction": 0.1,
                      "spread": 2.5,
                      "mmr": 0.013,
                      "emr": 0,
                      "lmr": 0,
                      "pipCost": 0.0001
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/OfferTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=OpenPosition": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of Open Posisiont tables",
        "description": "In case continuous updates of the trading tables is not needed, it is possible to request a one-time snapshot. Gets current content snapshot of the specified data models.",
        "operationId": "tradingTable/snapshot",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "OpenPosition"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "open_positions": [
                    {
                      "t": 1,
                      "ratePrecision": 5,
                      "tradeId": "122743073",
                      "accountName": "01027808",
                      "accountId": "1027808",
                      "roll": 0,
                      "com": 5,
                      "open": 1.19719,
                      "valueDate": "",
                      "grossPL": 1.74,
                      "close": 1.19632,
                      "visiblePL": 8.7,
                      "isDisabled": false,
                      "currency": "EUR/USD",
                      "isBuy": false,
                      "amountK": 2,
                      "currencyPoint": 0.2,
                      "time": "09152017143932",
                      "usedMargin": 52,
                      "stop": 0,
                      "stopMove": 0,
                      "limit": 0
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/OpenPositionResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=ClosedPosition": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of closed position",
        "description": "the Closed Positions table that contains information about the positions closed during the current trading day such as realized profit/loss, charged commission, cumulative interest, and so on.",
        "operationId": "tradingTable/ClosedPositions",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "ClosedPosition"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "closed_positions": [
                    {
                      "t": 2,
                      "ratePrecision": 5,
                      "tradeId": "122643271",
                      "accountName": "01027808",
                      "roll": 3.85,
                      "com": 10,
                      "open": 1.19446,
                      "valueDate": "",
                      "grossPL": -30.3,
                      "close": 1.19749,
                      "visiblePL": -30.3,
                      "currency": "EUR/USD",
                      "isBuy": false,
                      "amountK": 10,
                      "currencyPoint": 1,
                      "openTime": "09062017152749",
                      "closeTime": "09152017143928"
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ClosedPositionResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=Order": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of orders table",
        "description": "the Orders table that contains information about orders. The data is kept in this table until all the orders are executed",
        "operationId": "tradingTable/OrdersTable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Order"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "orders": [
                    {
                      "t": 3,
                      "ratePrecision": 5,
                      "orderId": "235518786",
                      "time": "08312017160712",
                      "accountName": "01027808",
                      "accountId": "1027808",
                      "timeInForce": "GTC",
                      "currency": "EUR/USD",
                      "isBuy": true,
                      "buy": 1.17,
                      "sell": 0,
                      "type": "LE",
                      "status": 1,
                      "amountK": 10,
                      "currencyPoint": 1,
                      "stopMove": 0,
                      "stop": 1.16,
                      "stopRate": 1.16,
                      "limit": 1.18,
                      "limitRate": 1.18,
                      "isEntryOrder": true,
                      "ocoBulkId": 235518952,
                      "isNetQuantity": false,
                      "isLimitOrder": true,
                      "isStopOrder": false,
                      "isELSOrder": false,
                      "stopPegBaseType": -1,
                      "limitPegBaseType": -1,
                      "range": 0
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/OrdersTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=Summary": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of summary table",
        "description": "the Summary table that contains summarized information such as the average entry price, profit/loss, and so on for every instrument currently traded.",
        "operationId": "tradingTable/SummaryTable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Summary"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "summary": [
                    {
                      "t": 5,
                      "ratePrecision": 5,
                      "offerId": 1,
                      "currency": "EUR/USD",
                      "plSell": 6.09,
                      "amountKSell": 7,
                      "avgSell": 1.19719,
                      "closeBuy": 1.19632,
                      "closeSell": 0,
                      "avgBuy": 0,
                      "amountKBuy": 0,
                      "rollSum": 0,
                      "usedMarginSell": 182,
                      "usedMarginBuy": 0,
                      "isSellDisabled": false,
                      "isBuyDisabled": true,
                      "plBuy": 0,
                      "amountK": -7,
                      "currencyPoint": -0.7,
                      "grossPL": 6.09,
                      "netPL": 1.09,
                      "netStop": 0,
                      "netStopMove": 0,
                      "netLimit": 0
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/SummaryTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/get_model&model=Account": {
      "get": {
        "tags": [
          "Trading Tables"
        ],
        "summary": "Snapshot of Account table",
        "description": "the Accounts table that contains the trading account data such as funds used in trading, idle funds, profits/losses, certain account limitations, and so on.",
        "operationId": "tradingTable/AccountTable",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTradingTablesSnapshotDefinition"
            },
            "x-examples": {
              "application/json": {
                "models": "Account"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "accounts": [
                    {
                      "t": 6,
                      "ratePrecision": 0,
                      "accountId": "1234567",
                      "balance": 39208.63,
                      "usdMr": 116,
                      "mc": "N",
                      "accountName": "01027808",
                      "usdMr3": 58,
                      "hedging": "N",
                      "usableMargin3": 39152.26234,
                      "usableMarginPerc": 99.70416,
                      "usableMargin3Perc": 99.85208,
                      "equity": 39210.26234,
                      "usableMargin": 39094.26234,
                      "dayPL": -63.21766,
                      "grossPL": 1.63234
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/AccountTableResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/open_trade": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Open Trade",
        "description": "This command will request immediate opening of a trade at the best available price.",
        "operationId": "openTrade",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdParam"
          },
          {
            "$ref": "#/parameters/symbolParam"
          },
          {
            "$ref": "#/parameters/isBuyParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/amountParam"
          },
          {
            "$ref": "#/parameters/stopParam"
          },
          {
            "$ref": "#/parameters/trailingStepParam"
          },
          {
            "$ref": "#/parameters/limitParam"
          },
          {
            "$ref": "#/parameters/isInPipsParam"
          },
          {
            "$ref": "#/parameters/atMarketParam"
          },
          {
            "$ref": "#/parameters/orderTypeParam"
          },
          {
            "$ref": "#/parameters/timeInForceParam"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "#/definitions/OpenTradeRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "account_id": "01027808",
                "symbol": "EUR/USD",
                "is_buy": false,
                "rate": 0,
                "amount": 10,
                "at_market": 0,
                "order_type": "AtMarket",
                "time_in_force": "FOK"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/close_trade": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Close Trade",
        "description": "This command will request immediate closure of a trade at the best available price.",
        "operationId": "closeTrade",
        "parameters": [
          {
            "$ref": "#/parameters/tradeIdParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/amountParam"
          },
          {
            "$ref": "#/parameters/atMarketParam"
          },
          {
            "$ref": "#/parameters/orderTypeParam"
          },
          {
            "$ref": "#/parameters/timeInForceParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseTradeRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "trade_id": 122456284,
                "rate": 0,
                "amount": 1000,
                "at_market": 0,
                "order_type": "AtMarket",
                "time_in_force": "GTC"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/change_order": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Change Order",
        "description": "This command will change an existing order that has not been executed.",
        "operationId": "changeOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderIdParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/rangeParam"
          },
          {
            "$ref": "#/parameters/amountParam"
          },
          {
            "$ref": "#/parameters/trailingStepParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "order_id": 235045369,
                "rate": 1.7,
                "range": 0,
                "amount": 1,
                "trailing_step": 2
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/delete_order": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Delete Order",
        "description": "This command will request the removal of an existing order that has not been executed.",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "$ref": "#/parameters/orderIdParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOrderRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "order_id": 235045369
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/create_entry_order": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Create Entry Order",
        "description": "This command will request the creation of a standing order to be filled when market reaches the requested price.",
        "operationId": "createEntryOrder",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdParam"
          },
          {
            "$ref": "#/parameters/symbolParam"
          },
          {
            "$ref": "#/parameters/isBuyParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/amountParam"
          },
          {
            "$ref": "#/parameters/stopParam"
          },
          {
            "$ref": "#/parameters/trailingStepParam"
          },
          {
            "$ref": "#/parameters/limitParam"
          },
          {
            "$ref": "#/parameters/isInPipsParam"
          },
          {
            "$ref": "#/parameters/orderTypeParam"
          },
          {
            "$ref": "#/parameters/CEOTimeInForceParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntryOrderRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "account_id": "01027808",
                "symbol": "EUR/USD",
                "is_buy": true,
                "rate": 1.16,
                "is_in_pips": false,
                "amount": 1000,
                "order_type": "Entry",
                "time_in_force": "GTC"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/simple_oco": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Simple OCO order",
        "description": "This command will request the creation of a pair of orders. Execution of one of the orders will cancel the other one.",
        "operationId": "simpleOCO",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdParam"
          },
          {
            "$ref": "#/parameters/symbolParam"
          },
          {
            "$ref": "#/parameters/amountParam"
          },
          {
            "$ref": "#/parameters/isInPipsParam"
          },
          {
            "$ref": "#/parameters/timeInForceParam"
          },
          {
            "$ref": "#/parameters/expirationParam"
          },
          {
            "$ref": "#/parameters/isBuyParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/stopParam"
          },
          {
            "$ref": "#/parameters/trailingStepParam"
          },
          {
            "$ref": "#/parameters/trailingStopStepParam"
          },
          {
            "$ref": "#/parameters/limitParam"
          },
          {
            "$ref": "#/parameters/atMarketParam"
          },
          {
            "$ref": "#/parameters/orderTypeParam"
          },
          {
            "$ref": "#/parameters/isBuy2Param"
          },
          {
            "$ref": "#/parameters/rate2Param"
          },
          {
            "$ref": "#/parameters/stop2Param"
          },
          {
            "$ref": "#/parameters/trailingStep2Param"
          },
          {
            "$ref": "#/parameters/trailingStopStep2Param"
          },
          {
            "$ref": "#/parameters/limit2Param"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimpleOCORequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "account_id": "01027808",
                "symbol": "EUR/USD",
                "is_buy": true,
                "rate": 1.16,
                "is_in_pips": false,
                "stop": 1.16,
                "trailing_step": 0,
                "trailing_stop_step": 0,
                "limit": 1.18,
                "is_buy2": false,
                "rate2": 1.09,
                "stop2": 0,
                "trailing_step2": 0,
                "trailing_stop_step2": 0,
                "amount": 1000,
                "order_type": "AtMarket",
                "time_in_force": "GTC"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/edit_oco": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Edit OCO",
        "description": "This command will request the addition or removal of an existing orders to/from an OCO group.",
        "operationId": "editOCO",
        "parameters": [
          {
            "$ref": "#/parameters/ocoBulkIdParam"
          },
          {
            "$ref": "#/parameters/addOrderIdParam"
          },
          {
            "$ref": "#/parameters/removeOrderIdParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditOCORequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "ocoBulkId": 236175794,
                "addOrderIds": 235053904
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/change_trade_stop_limit": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Change Trade Stop Limit",
        "description": "This command will request the change of a stop loss or limit profit order attached to a trade.",
        "operationId": "changeTradeStopLimit",
        "parameters": [
          {
            "$ref": "#/parameters/tradeIdParam"
          },
          {
            "$ref": "#/parameters/isStopParam"
          },
          {
            "$ref": "#/parameters/rateParam"
          },
          {
            "$ref": "#/parameters/isInPipsParam"
          },
          {
            "$ref": "#/parameters/trailingStepParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeTradeStopLimitRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "trade_id": 22835946,
                "is_stop": true,
                "rate": 1.19611,
                "is_in_pips": false,
                "trailing_step": 0
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/change_order_stop_limit": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Change Order Stop Limit",
        "description": "This command will request the change of a stop loss or limit profit order attached to an entry order.",
        "operationId": "changeOrderStopLimit",
        "parameters": [
          {
            "$ref": "#/parameters/orderIdParam"
          },
          {
            "$ref": "#/parameters/limitParam"
          },
          {
            "$ref": "#/parameters/isLimitInPipsParam"
          },
          {
            "$ref": "#/parameters/stopParam"
          },
          {
            "$ref": "#/parameters/isStopInPipsParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderStopLimitRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "order_id": 72513348,
                "limit": 1.19,
                "is_limit_in_pips": false,
                "stop": 1.18,
                "is_stop_in_pips": false
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/trading/close_all_for_symbol": {
      "post": {
        "tags": [
          "Trading Orders"
        ],
        "summary": "Close All for a symbol",
        "description": "This command will request the closure of all positions for a specified security.",
        "operationId": "close_all_for_symbol",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdParam"
          },
          {
            "$ref": "#/parameters/forSymbolParam"
          },
          {
            "$ref": "#/parameters/symbolParam"
          },
          {
            "$ref": "#/parameters/orderTypeParam"
          },
          {
            "$ref": "#/parameters/timeInForceParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseForAllSymbolsRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "account_id": "01027808",
                "forSymbol": true,
                "symbol": "EUR/USD",
                "order_type": "AtMarket",
                "time_in_force": "GTC"
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true
                },
                "data": null
              }
            },
            "schema": {
              "$ref": "#/definitions/TraderOrdersResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    },
    "/candles/{offer_id}/{period_id}": {
      "get": {
        "tags": [
          "Historical Data"
        ],
        "summary": "/candles/{offer_id}/{period_id}",
        "description": "This command will request historical price data.",
        "operationId": "candle",
        "parameters": [
          {
            "$ref": "#/parameters/offerIdParam"
          },
          {
            "$ref": "#/parameters/periodIdParam"
          },
          {
            "$ref": "#/parameters/numParam"
          },
          {
            "$ref": "#/parameters/fromParam"
          },
          {
            "$ref": "#/parameters/toParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoricalDataRequestDefinition"
            },
            "x-examples": {
              "application/json": {
                "offer_id": 1,
                "period_id": "H1",
                "num": 10,
                "from": 1498125600,
                "to": 1498150800
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "response": {
                  "executed": true,
                  "error": ""
                },
                "instrument_id": 1,
                "period_id": "H1",
                "candles": [
                  [
                    1498125600,
                    1.11641,
                    1.11643,
                    1.11664,
                    1.11592,
                    1.11664,
                    1.11667,
                    1.11688,
                    1.11616,
                    10423
                  ],
                  [
                    1498129200,
                    1.11643,
                    1.11641,
                    1.11654,
                    1.11558,
                    1.11667,
                    1.11664,
                    1.11677,
                    1.1158,
                    11229
                  ],
                  [
                    1498132800,
                    1.11641,
                    1.116,
                    1.11712,
                    1.11578,
                    1.11664,
                    1.11622,
                    1.11735,
                    1.11602,
                    16846
                  ],
                  [
                    1498136400,
                    1.116,
                    1.11586,
                    1.1163,
                    1.11513,
                    1.11622,
                    1.1161,
                    1.11653,
                    1.11537,
                    18744
                  ],
                  [
                    1498136400,
                    1.116,
                    1.11586,
                    1.1163,
                    1.11513,
                    1.11622,
                    1.11611,
                    1.11653,
                    1.11537,
                    18743
                  ],
                  [
                    1498140000,
                    1.11586,
                    1.11558,
                    1.11613,
                    1.11495,
                    1.1161,
                    1.11582,
                    1.11637,
                    1.11518,
                    20571
                  ],
                  [
                    1498140000,
                    1.11586,
                    1.11558,
                    1.11613,
                    1.11495,
                    1.1161,
                    1.11582,
                    1.11637,
                    1.11518,
                    20572
                  ],
                  [
                    1498143600,
                    1.11558,
                    1.11457,
                    1.116,
                    1.11442,
                    1.11582,
                    1.11481,
                    1.11623,
                    1.11466,
                    15800
                  ],
                  [
                    1498147200,
                    1.11457,
                    1.11542,
                    1.11549,
                    1.11457,
                    1.11481,
                    1.11566,
                    1.11572,
                    1.11481,
                    7491
                  ],
                  [
                    1498150800,
                    1.11542,
                    1.1142,
                    1.11563,
                    1.11382,
                    1.11566,
                    1.11444,
                    1.11588,
                    1.11406,
                    8687
                  ]
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/candleResponseDefinition"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401_Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403_Forbidden"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error404_Not_found"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "userAgent": {
      "name": "User-Agent",
      "type": "string",
      "in": "header",
      "description": "Identification of the client software",
      "enum": [
        "request"
      ],
      "required": true
    },
    "accept": {
      "name": "Accept",
      "type": "string",
      "in": "header",
      "description": "Acceptable response MIME type",
      "enum": [
        "application/json"
      ],
      "required": true
    },
    "contentType": {
      "name": "Content-Type",
      "type": "string",
      "in": "header",
      "description": "Media type of the request",
      "enum": [
        "application/x-www-form-urlencoded"
      ],
      "required": true
    },
    "authorization": {
      "name": "Authorization",
      "type": "string",
      "in": "header",
      "description": "Authorization string containing âBearer â, ID of socke.io connection and persistent token",
      "enum": [
        "Bearer + socket_id + api_token"
      ],
      "required": true
    },
    "accountIdParam": {
      "in": "query",
      "type": "string",
      "name": "account_id",
      "description": "The tradeâs account identifier",
      "required": true
    },
    "symbolParam": {
      "in": "query",
      "type": "string",
      "name": "symbol",
      "description": "The tradeâs account identifier",
      "required": true
    },
    "isBuyParam": {
      "in": "query",
      "type": "boolean",
      "name": "is_buy",
      "description": "Defines the tradeâs market side (if true, then buy trade,otherwise sell trade). Temporarily not required by the server and defaults to true but this will change.",
      "required": false
    },
    "rateParam": {
      "in": "query",
      "type": "number",
      "name": "rate",
      "description": "The tradeâs rate.",
      "required": false
    },
    "amountParam": {
      "in": "query",
      "type": "string",
      "name": "amount",
      "description": "The tradeâs amount in lots.",
      "required": true
    },
    "stopParam": {
      "in": "query",
      "type": "number",
      "name": "stop",
      "description": "The tradeâs stop rate.",
      "required": false
    },
    "trailingStepParam": {
      "in": "query",
      "type": "number",
      "name": "trailing_step",
      "description": "The trailing step for the stop rate.",
      "required": false
    },
    "trailingStopStepParam": {
      "in": "query",
      "type": "number",
      "name": "trailing_stop_step",
      "description": "The trailing step for the stop rate.",
      "required": false
    },
    "limitParam": {
      "in": "query",
      "type": "number",
      "name": "limit",
      "description": "The tradeâs limit rate.",
      "required": false
    },
    "isInPipsParam": {
      "in": "query",
      "type": "boolean",
      "name": "is_in_pips",
      "description": "Defines if the tradeâs stop/limit rate is in pips.",
      "required": false
    },
    "atMarketParam": {
      "in": "query",
      "type": "number",
      "name": "at_market",
      "description": "Defines the market range.",
      "required": true
    },
    "orderTypeParam": {
      "in": "query",
      "type": "string",
      "name": "order_type",
      "description": "The type of the order execution. Market Order type choices âAtMarketâ, âMarketRangeâ.",
      "required": true,
      "enum": [
        "AtMarket",
        "MarketRange"
      ]
    },
    "timeInForceParam": {
      "in": "query",
      "type": "string",
      "name": "time_in_force",
      "description": "Time in force choices âIOCâ, âGTCâ, âFOKâ, âDAYâ, âGTDâ.",
      "required": true,
      "enum": [
        "IOC",
        "GTC",
        "FOK",
        "DAY",
        "GTD"
      ]
    },
    "CEOTimeInForceParam": {
      "in": "query",
      "type": "string",
      "name": "time_in_force",
      "description": "Time in force choices âGTCâ, âDAYâ, âGTDâ.",
      "required": true,
      "enum": [
        "GTC",
        "DAY",
        "GTD"
      ]
    },
    "tradeIdParam": {
      "in": "query",
      "type": "string",
      "name": "trade_id",
      "description": "The trade identifier",
      "required": true
    },
    "orderIdParam": {
      "in": "query",
      "type": "string",
      "name": "order_id",
      "description": "The order identifier.",
      "required": true
    },
    "rangeParam": {
      "in": "query",
      "type": "number",
      "name": "range",
      "description": "The orderâs range (is used for âRangeEntryâ orders only)."
    },
    "expirationParam": {
      "in": "query",
      "type": "string",
      "name": "expiration",
      "description": "The order's expiration date.",
      "required": false
    },
    "isBuy2Param": {
      "in": "query",
      "type": "boolean",
      "name": "is_buy2",
      "description": "Defines the second tradeâs market side (if true, then buy trade, otherwise sell trade).",
      "required": true
    },
    "rate2Param": {
      "in": "query",
      "type": "number",
      "name": "rate2",
      "description": "The second tradeâs rate.",
      "required": true
    },
    "stop2Param": {
      "in": "query",
      "type": "number",
      "name": "stop2",
      "description": "The secondtradeâs stop rate.",
      "required": true
    },
    "trailingStep2Param": {
      "in": "query",
      "type": "number",
      "name": "trailing_step2",
      "description": "The second trailing step for the stop rate.",
      "required": true
    },
    "trailingStopStep2Param": {
      "in": "query",
      "type": "number",
      "name": "trailing_stop_step2",
      "description": "The second trailing step for the stop rate.",
      "required": true
    },
    "limit2Param": {
      "in": "query",
      "type": "number",
      "name": "limit2",
      "description": "The second tradeâs limit rate.",
      "required": true
    },
    "ocoBulkIdParam": {
      "in": "query",
      "type": "number",
      "name": "ocoBulkId",
      "description": "The oco bulk identifier (if equals zero then new oco order will be created).",
      "required": true
    },
    "addOrderIdParam": {
      "in": "query",
      "type": "number",
      "name": "addOrderId",
      "description": "The list orders identifiers to add to the oco order.",
      "required": true
    },
    "removeOrderIdParam": {
      "in": "query",
      "type": "number",
      "name": "removeOrderId",
      "description": "The list orders identifiers to remove from the oco order.",
      "required": true
    },
    "isStopParam": {
      "in": "query",
      "type": "boolean",
      "name": "is_stop",
      "description": "Defines stop or limit should be changed (if true, then stop should be changed, otherwise limit).",
      "required": true
    },
    "forSymbolParam": {
      "in": "query",
      "type": "boolean",
      "name": "forSymbol",
      "description": "Defines if trades should be closed for the specified symbol.",
      "required": true
    },
    "offerIdParam": {
      "in": "path",
      "type": "number",
      "name": "offer_id",
      "description": "Integer from Offer trading table",
      "required": true
    },
    "periodIdParam": {
      "in": "path",
      "type": "string",
      "name": "period_id",
      "description": "String, one of m1,m5,m15,m30,H1,H2,H3,H4,H6,H8,D1,W1,M1",
      "required": true,
      "enum": [
        "m1",
        "m5",
        "m15",
        "m30",
        "H1",
        "H2",
        "H3",
        "H4",
        "H6",
        "H8",
        "D1",
        "W1",
        "M1"
      ]
    },
    "numParam": {
      "in": "query",
      "type": "number",
      "name": "num",
      "description": "Number of candles requested",
      "required": true
    },
    "fromParam": {
      "in": "query",
      "type": "boolean",
      "name": "from",
      "description": "Beginning of time range"
    },
    "toParam": {
      "in": "query",
      "type": "boolean",
      "name": "to",
      "description": "End of time range"
    },
    "isStopInPipsParam": {
      "in": "query",
      "type": "boolean",
      "name": "is_stop_in_pips",
      "description": "Define if the trade's stop rate is in pips",
      "required": true
    },
    "isLimitInPipsParam": {
      "in": "query",
      "type": "boolean",
      "name": "is_limit_in_pips",
      "description": "Define if the trade's limit rate is in pips",
      "required": true
    }
  },
  "definitions": {
    "Error401_Unauthorized": {
      "type": "object",
      "description": "Unauthorized",
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string",
          "description": "The access token is not valid for this."
        }
      },
      "example": {
        "Code": 401,
        "Message": "The access token is not valid for this."
      }
    },
    "Error403_Forbidden": {
      "type": "object",
      "description": "Forbidden",
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string",
          "description": "The number of API requests per session has been exceeded."
        }
      },
      "example": {
        "Code": 403,
        "Message": "The number of API requests per session has been exceeded."
      }
    },
    "Error404_Not_found": {
      "type": "object",
      "description": "Not found",
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string",
          "description": "The resource name or ID is not valid."
        }
      },
      "example": {
        "Code": 404,
        "Message": "The resource name or ID is not valid."
      }
    },
    "Success200_OK": {
      "type": "object",
      "description": "OK",
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string",
          "description": "Successful response."
        }
      },
      "example": {
        "Code": 200,
        "Message": {
          "response": {
            "executed": true
          },
          "data": null
        }
      }
    },
    "Success201_Created": {
      "type": "object",
      "description": "Created",
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string",
          "description": "Successful Created."
        }
      }
    },
    "Error": {
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SubscribeMarketDataRequestDefinition": {
      "type": "object",
      "properties": {
        "pairs": {
          "description": "Symbols to be subscribed to",
          "type": "string",
          "x-examples": {
            "application/json": {
              "pairs": "EUR/USD"
            }
          }
        }
      }
    },
    "UnsubscribeMarketDataRequestDefinition": {
      "type": "object",
      "properties": {
        "pairs": {
          "description": "Symbols to be unsubscribed to",
          "type": "string",
          "x-examples": {
            "application/json": {
              "pairs": "EUR/USD"
            }
          }
        }
      }
    },
    "SubscribeTradingTablesDefinition": {
      "type": "object",
      "properties": {
        "models": {
          "description": "Name of the table model to be subscribed to",
          "type": "string",
          "enum": [
            "Offer",
            "OpenPosition",
            "ClosedPosition",
            "Order",
            "Account",
            "Summary",
            "LeverageProfile",
            "Properties"
          ],
          "x-examples": {
            "application/json": {
              "models": "Order"
            }
          }
        }
      }
    },
    "UnsubscribeTradingTablesDefinition": {
      "type": "object",
      "properties": {
        "models": {
          "description": "Name of the table model to be unsubscribed to",
          "type": "string",
          "enum": [
            "Offer",
            "OpenPosition",
            "ClosedPosition",
            "Order",
            "Account",
            "Summary",
            "LeverageProfile",
            "Properties"
          ],
          "x-examples": {
            "application/json": {
              "models": "Order"
            }
          }
        }
      }
    },
    "GetTradingTablesSnapshotDefinition": {
      "type": "object",
      "properties": {
        "models": {
          "description": "Gets current content snapshot of the specified data models.",
          "type": "string",
          "enum": [
            "Offer",
            "OpenPosition",
            "ClosedPosition",
            "Order",
            "Account",
            "Summary",
            "LeverageProfile",
            "Properties"
          ],
          "x-examples": {
            "application/json": {
              "models": "OpenPosition"
            }
          }
        }
      }
    },
    "OpenTradeRequestDefinition": {
      "type": "object",
      "description": "This command will request immediate opening of a trade at the best available price."
    },
    "CloseTradeRequestDefinition": {
      "type": "object",
      "description": "This command will request immediate closing of a trade at the best available price."
    },
    "ChangeOrderRequestDefinition": {
      "type": "object",
      "description": "This command will change an existing order that has not been executed."
    },
    "DeleteOrderRequestDefinition": {
      "type": "object",
      "description": "This command will request the removal of an existing order that has not been executed."
    },
    "EntryOrderRequestDefinition": {
      "type": "object",
      "description": "This command will request the creation of a standing order to be filled when market reaches the requested price."
    },
    "SimpleOCORequestDefinition": {
      "type": "object",
      "description": "This command will request the creation of a pair of orders. Execution of one of the orders will cancel the other one."
    },
    "EditOCORequestDefinition": {
      "type": "object",
      "description": "This command will request the addition or removal of an existing orders to/from an OCO group."
    },
    "ChangeTradeStopLimitRequestDefinition": {
      "type": "object",
      "description": "This command will request the change of a stop loss or limit profit order attached to a trade."
    },
    "ChangeOrderStopLimitRequestDefinition": {
      "type": "object",
      "description": "This command will request the change of a stop loss or limit profit order attached to an entry order."
    },
    "CloseForAllSymbolsRequestDefinition": {
      "type": "object",
      "description": "This command will request the closure of all positions for a specified security."
    },
    "HistoricalDataRequestDefinition": {
      "type": "object",
      "description": "This command will request historical price data."
    },
    "SubscribeMarketDataResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "executed": {
              "description": "Execution successful",
              "type": "boolean"
            },
            "error": {
              "description": "Type of socket",
              "type": "string"
            }
          }
        },
        "pairs": {
          "properties": {
            "Updated": {
              "description": "Timestamp of last update",
              "type": "number"
            },
            "Rates": {
              "description": "",
              "type": "array",
              "minItems": 6,
              "maxItems": 6,
              "items": {
                "type": "number"
              }
            },
            "Symbol": {
              "description": "Symbols",
              "type": "string"
            }
          }
        }
      }
    },
    "UnsubscribeMarketDataResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "executed": {
              "description": "Execution successful",
              "type": "boolean"
            },
            "error": {
              "description": "Type of socket",
              "type": "string"
            }
          }
        },
        "pairs": {
          "properties": {
            "Symbol": {
              "description": "Symbols",
              "type": "string"
            }
          }
        }
      }
    },
    "SubscribeTradingTableResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "excuted": {
              "description": "Execution successful",
              "type": "boolean"
            }
          }
        }
      }
    },
    "UnsubscribeTradingTableResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "excuted": {
              "description": "Execution successful",
              "type": "boolean"
            }
          }
        }
      }
    },
    "TraderOrdersResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "excuted": {
              "description": "Execution successful",
              "type": "boolean"
            }
          }
        },
        "data": {
          "description": "always null"
        }
      }
    },
    "OfferTableResponseDefinition": {
      "type": "object",
      "properties": {
        "offers": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "offerid": {
                "description": "The unique identification number of the instrument.",
                "type": "number"
              },
              "rollB": {
                "description": "The interest amount added to the account balance for holding a one lot long (buy) position overnight. In the case of FX instruments, lot size is determined by the system base unit size. In the case of CFD instruments, lot size equals to one contract. The interest amount is expressed in the account currency and can be positive or negative.",
                "type": "number"
              },
              "rollS": {
                "description": "The interest amount added to the account balance for holding a one lot short (sell) position overnight. In the case of FX instruments, lot size is determined by the system base unit size. In the case of CFD instruments, lot size equals to one contract. The interest amount is expressed in the account currency and can be positive or negative.",
                "type": "number"
              },
              "fractionDigits": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "pip": {
                "description": "The size of one pip. It used to define the smallest move the instrument can make. In the case of FX instruments, it is expressed in the instrument counter currency. In the case of CFD instruments, it is expressed in the instrument native currency.",
                "type": "number"
              },
              "defaultSortOrder": {
                "description": "Sorting index of the instrument",
                "type": "number"
              },
              "Currency": {
                "description": "The symbol of the instrument",
                "type": "string"
              },
              "instrumentType": {
                "description": "The type of the instrument. The possible values are \n1 â Forex\n2 â Indices\n3 â Commodity\n4 â Treasury\n5 â Bullion\n6 â Shares\n7 â FXIndex\n",
                "type": "number"
              },
              "valueDate": {
                "description": "The simulated delivery date. The date and time when the position opened in the instrument could be automatically closed. The value of this field is provided in the yyyyMMdd format. It is applicable only when instrument trades on account with the day netting trading. Otherwise, the value of this field is blank.",
                "type": "string"
              },
              "time": {
                "description": "The date and time of the last update of the instrument. ISO 8601 format.",
                "type": "string"
              },
              "sell": {
                "description": "The current market price the instrument can be sold at.",
                "type": "number"
              },
              "buy": {
                "description": "The current market price the instrument can be bought at.",
                "type": "number"
              },
              "sellTradable": {
                "description": "The usage of the sell price. It defines whether the sell price of the instrument is available for trading or not.",
                "type": "boolean"
              },
              "buyTradable": {
                "description": "The usage of the buy price. It defines whether the buy price of the instrument is available for trading or not.",
                "type": "number"
              },
              "high": {
                "description": "The highest buy price of the instrument for the current trading day.",
                "type": "number"
              },
              "low": {
                "description": "The lowest sell price of the instrument for the current trading day.",
                "type": "number"
              },
              "volume": {
                "description": "The tick volume of the current minute. The value of this field represents the number of ticks happened during the current minute.",
                "type": "number"
              },
              "pipFraction": {
                "description": "Minimum price change for the instrument",
                "type": "number"
              },
              "spread": {
                "description": "Difference between Buy and Sell price in pips.",
                "type": "number"
              },
              "mmr": {
                "description": "Maintenance margin level.",
                "type": "number"
              },
              "emr": {
                "description": "Entry margin level.",
                "type": "number"
              },
              "lmr": {
                "description": "Limitation margin level.",
                "type": "number"
              },
              "pipCost": {
                "description": "The cost of one pip per lot. It is expressed in the account currency and used to calculate the P/L value in the account currency.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "OpenPositionResponseDefinition": {
      "type": "object",
      "properties": {
        "openPosition": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "tradeId": {
                "description": "The unique identification number of the open position. The number is unique within the same database that stores the account the position is opened on.",
                "type": "string"
              },
              "accountName": {
                "description": "The unique name of the account the position is opened on. The name is unique within the database where the account is stored.",
                "type": "string"
              },
              "accountId": {
                "description": "The unique identification number of the account the position is opened on. The number is unique within the database where the account is stored.",
                "type": "string"
              },
              "roll": {
                "description": "The cumulative amount of funds that is added the account balance for holding the position overnight.",
                "type": "number"
              },
              "com": {
                "description": "The amount of funds subtracted from the account balance to pay for the broker's service in accordance with the terms and conditions of the account trading agreement.",
                "type": "number"
              },
              "open": {
                "description": "The price the position is opened at.",
                "type": "number"
              },
              "valueDate": {
                "description": "The simulated delivery date. The date when the position could be automatically closed. The date is provided in the yyyyMMdd format. It is applicable only for positions opened on accounts with the day netting trading mode. Otherwise, the value of this field is blank.",
                "type": "string"
              },
              "grossPL": {
                "description": "The current profit/loss of the position. It is expressed in the account currency.",
                "type": "number"
              },
              "close": {
                "description": "The price at which the position can be closed at the moment.",
                "type": "number"
              },
              "visiblePL": {
                "description": "The current profit/loss per one lot of the position. It is expressed in the account currency.",
                "type": "number"
              },
              "isDisabled": {
                "description": "unknown",
                "type": "boolean"
              },
              "currency": {
                "description": "The symbol of the instrument.",
                "type": "string"
              },
              "isBuy": {
                "description": "The trade operation the position is opened by. The possible values are\nTrue â Buy\nFalse â Sell\n",
                "type": "number"
              },
              "amountK": {
                "description": "The amount of the position in thousand units.",
                "type": "number"
              },
              "currencyPoint": {
                "description": "unknown",
                "type": "number"
              },
              "time": {
                "description": "The date and time when the position was opened.",
                "type": "string"
              },
              "usedMargin": {
                "description": "The amount of funds currently committed to maintain the position.",
                "type": "number"
              },
              "stop": {
                "description": "The price of the associated stop order (loss limit level).",
                "type": "number"
              },
              "stopMove": {
                "description": "The number of pips the market should move before the stop order moves the same number of pips after it. If the trailing order is dynamic (automatically updates every 0.1 of a pip), then the value of this field is 1. If the order is not trailing, the value of this field is 0.",
                "type": "number"
              },
              "limit": {
                "description": "The price of the associated limit order (profit limit level).",
                "type": "number"
              },
              "isTotal": {
                "description": "Indicates the row is a summary of for whole table.",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "ClosedPositionResponseDefinition": {
      "type": "object",
      "properties": {
        "cloesedPosition": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "tradeId": {
                "description": "The unique identification number of the open position. The number is unique within the same database that stores the account the position is opened on.",
                "type": "string"
              },
              "accountName": {
                "description": "The unique name of the account the position is opened on. The name is unique within the database where the account is stored.",
                "type": "string"
              },
              "roll": {
                "description": "The cumulative amount of funds that is added the account balance for holding the position overnight.",
                "type": "number"
              },
              "com": {
                "description": "The amount of funds subtracted from the account balance to pay for the broker's service in accordance with the terms and conditions of the account trading agreement.",
                "type": "number"
              },
              "open": {
                "description": "The price the position is opened at.",
                "type": "number"
              },
              "valueDate": {
                "description": "The simulated delivery date. The date when the position could be automatically closed. The date is provided in the yyyyMMdd format. It is applicable only for positions opened on accounts with the day netting trading mode. Otherwise, the value of this field is blank.",
                "type": "string"
              },
              "grossPL": {
                "description": "The current profit/loss of the position. It is expressed in the account currency.",
                "type": "number"
              },
              "close": {
                "description": "The price at which the position can be closed at the moment.",
                "type": "number"
              },
              "visiblePL": {
                "description": "The current profit/loss per one lot of the position. It is expressed in the account currency.",
                "type": "number"
              },
              "currency": {
                "description": "The symbol of the instrument.",
                "type": "string"
              },
              "isBuy": {
                "description": "The trade operation the position is opened by. The possible values are\nTrue â Buy\nFalse â Sell\n",
                "type": "number"
              },
              "amountK": {
                "description": "The amount of the position in thousand units.",
                "type": "number"
              },
              "currencyPoint": {
                "description": "unknown",
                "type": "number"
              },
              "openTime": {
                "description": "The date and time when the position was opened.",
                "type": "string"
              },
              "closeTime": {
                "description": "The date and time when the position was closed.",
                "type": "string"
              },
              "isTotal": {
                "description": "Indicates the row is a summary of for whole table.",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "OrdersTableResponseDefinition": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "orderid": {
                "description": "The unique identification number of the order. The number is unique within the same database that stores the account the order is placed on.",
                "type": "string"
              },
              "time": {
                "description": "The time when the order was created",
                "type": "string"
              },
              "accountName": {
                "description": "The unique name of the account the position is opened on. The name is unique within the database where the account is stored.",
                "type": "string"
              },
              "accountId": {
                "description": "The unique identification number of the account the position is opened on. The number is unique within the database where the account is stored.",
                "type": "string"
              },
              "timeInForce": {
                "description": "The time-in-force option of the order. The possible values are\nGTC â Good Till Cancelled\nIOC â Immediate Or Cancel\nFOK â Fill Or Kill \nDAY â Day Order\nGTD â Good Till Date\n",
                "type": "string",
                "enum": [
                  "GTC",
                  "IOC",
                  "FOK",
                  "DAY",
                  "GTD"
                ]
              },
              "currency": {
                "description": "The symbol of the instrument.",
                "type": "string"
              },
              "isBuy": {
                "description": "The trade operation the position is opened by. The possible values are\nTrue â Buy\nFalse â Sell\n",
                "type": "boolean"
              },
              "buy": {
                "description": "The price the order is placed at.",
                "type": "number"
              },
              "sell": {
                "description": "The price the order is placed at.",
                "type": "number"
              },
              "type": {
                "description": "The order type. The possible values are\nS â Stop\nST â Trailing Stop \nL â Limit\nSE â Entry Stop\nLE â Entry Limit\nSTE â Trailing Entry Stop\nLTE â Trailing Entry Limit\nC â Close\nCM â Close Market\nCR â Close Range\nO â Open\nOM â Open Market\nOR â Open Range\nM â Margin Call\n",
                "type": "string",
                "enum": [
                  "S",
                  "ST",
                  "L",
                  "SE",
                  "LE",
                  "STE",
                  "LTE",
                  "C",
                  "CM",
                  "CR",
                  "O",
                  "OM",
                  "OR",
                  "M"
                ]
              },
              "status": {
                "description": "The state of the order. The possible values are",
                "type": "string"
              },
              "amountK": {
                "description": "The amount of the position in thousand units.",
                "type": "number"
              },
              "currencyPoint": {
                "description": "unknown",
                "type": "number"
              },
              "stopMove": {
                "description": "The number of pips the market should move before the stop order moves the same number of pips after it. If the trailing order is dynamic (automatically updates every 0.1 of a pip), then the value of this field is 1. If the order is not trailing, the value of this field is 0.",
                "type": "number"
              },
              "stop": {
                "description": "The price of the associated stop order (loss limit level).",
                "type": "number"
              },
              "stopRate": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "limit": {
                "description": "The price of the associated limit order (profit limit level).",
                "type": "number"
              },
              "limitRate": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "isEntryOrder": {
                "description": "Indicates if the order is of Entry type (resting order).",
                "type": "boolean"
              },
              "ocoBulkId": {
                "description": "The unique identifier of an existing OCO group which the order is linked to. The number is unique within the same database that stores the account the contingent order is placed on.",
                "type": "number"
              },
              "isNetQuantity": {
                "description": "Indicates if the order is of Net Amount type.",
                "type": "boolean"
              },
              "isLimitOrder": {
                "description": "Indicates if the order is of Limit type.",
                "type": "boolean"
              },
              "isStopOrder": {
                "description": "Indicates if the order is of Stop type.",
                "type": "boolean"
              },
              "isELSOrder": {
                "description": "Indicates if the order is of Entry with Limit and Stop type.",
                "type": "boolean"
              },
              "stopPegBaseType": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "limitPegBaseType": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "range": {
                "description": "UNKNOWN",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "SummaryTableResponseDefinition": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "offerid": {
                "description": "The unique identification number of the instrument.",
                "type": "number"
              },
              "currency": {
                "description": "The symbol of the instrument.",
                "type": "string"
              },
              "plSell": {
                "description": "The current profit/loss of all Sell positions. It does not include commissions and interests.",
                "type": "number"
              },
              "amountKSell": {
                "description": "The sum of amounts of Sell positions in thousand units.",
                "type": "number"
              },
              "avgSell": {
                "description": "The average open price of Sell positions.",
                "type": "number"
              },
              "closeBuy": {
                "description": "The current market price, at which Sell positions can be closed.",
                "type": "number"
              },
              "closeSell": {
                "description": "The current market price, at which Buy positions can be closed.",
                "type": "number"
              },
              "avgBuy": {
                "description": "The average open price of Buy positions.",
                "type": "number"
              },
              "amountKBuy": {
                "description": "The sum of amounts of Buy positions in thousand units.",
                "type": "number"
              },
              "rollSum": {
                "description": "The cumulative amount of funds that is added the account balance for holding the positions overnight.",
                "type": "number"
              },
              "usedMarginSell": {
                "description": "The amount of funds currently committed to maintain Sell positions.",
                "type": "number"
              },
              "usedMarginBuy": {
                "description": "The amount of funds currently committed to maintain Buy positions.",
                "type": "number"
              },
              "isSellDisabled": {
                "description": "UNKNOWN",
                "type": "boolean"
              },
              "isBuyDisabled": {
                "description": "UNKNOWN",
                "type": "boolean"
              },
              "plBuy": {
                "description": "The current profit/loss of all Buy positions. It does not include commissions and interests.",
                "type": "number"
              },
              "amountK": {
                "description": "The sum of amounts of all positions in thousand units.",
                "type": "number"
              },
              "currencyPoint": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "grossPL": {
                "description": "The current profit/loss of all positions. It does not include commissions and interests.",
                "type": "number"
              },
              "netPL": {
                "description": "The current profit/loss of all positions. It includes commissions and interests.",
                "type": "number"
              },
              "netStop": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "netStopMove": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "netLimit": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "isTotal": {
                "description": "Indicates the row is a summary of for whole table.",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "AccountTableResponseDefinition": {
      "type": "object",
      "properties": {
        "account": {
          "type": "array",
          "items": {
            "properties": {
              "t": {
                "description": "ID number of the table",
                "type": "number"
              },
              "ratePrecision": {
                "description": "The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.",
                "type": "number"
              },
              "accountId": {
                "description": "The unique identification number of the account the position is opened on. The number is unique within the database where the account is stored.",
                "type": "string"
              },
              "balance": {
                "description": "The amount of funds on the account. This amount does not include floating profit and loss",
                "type": "number"
              },
              "usdMr": {
                "description": "The amount of funds used to maintain all open positions on the account.",
                "type": "number"
              },
              "mc": {
                "description": "The limitation state of the account. Each state defines the operations that can be performed on the account. The possible values are\nY â Margin call (all positions are liquidated, new positions cannot be opened).\nW â Warning of a possible margin call (positions may be closed, new positions cannot be opened).\nQ â Equity stop (all positions are liquidated, new positions cannot be opened up to the end of the trading day).\nA â Equity alert (positions may be closed, new positions cannot be opened up to the end of the trading day).\nN â No limitations (no limitations are imposed on the account operations).\n",
                "type": "string",
                "enum": [
                  "Y",
                  "W",
                  "Q",
                  "A",
                  "N"
                ]
              },
              "accountName": {
                "description": "The unique name of the account the position is opened on. The name is unique within the database where the account is stored.",
                "type": "string"
              },
              "usdMr3": {
                "description": "The amount of funds used to maintain all open positions on the account with the three-level margin policy.",
                "type": "number"
              },
              "hedging": {
                "description": "The type of the position maintenance. It defines how trade operations can be performed on the account. The possible values are\nY â Hedging is allowed. In other words, both buy and sell positions can be opened for the same instrument at the same time. To close each buy or sell position, an individual order is required.\nN â Hedging is not allowed. In other words, either a buy or a sell position can be opened for the same instrument at a time. Opening a position for the instrument that already has open position(s) of the opposite trade operation always causes closing or partial closing of the open position(s).\n0 â Netting only. In other words, for each instrument there exists only one open position. The amount of the position is the total amount of the instrument, either bought or sold, that has not yet been offset by opposite trade operations.\nD â Day netting. In other words, for each instrument there exists only one open position. Same as Netting only, but within a trading day. If the position is not offset during the same trading day it is opened, it is closed automatically on simulated delivery date.\nF â FIFO. Positions open and close in accordance with the FIFO (First-in, First-out) rule. Hedging is not allowed.\n",
                "type": "string",
                "enum": [
                  "Y",
                  "N",
                  "O",
                  "D",
                  "F"
                ]
              },
              "usableMargin3": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "usableMarginPerc": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "usableMargin3Perc": {
                "description": "UNKNOWN",
                "type": "number"
              },
              "equity": {
                "description": "The amount of funds on the account, including profits and losses of all open positions (the floating balance of the account).",
                "type": "number"
              },
              "usableMargin": {
                "description": "The amount of funds available to open new positions or to absorb losses of the existing positions.",
                "type": "number"
              },
              "dayPL": {
                "description": "The amount of profits and losses (both floating and realized) of the current trading day.",
                "type": "number"
              },
              "grossPL": {
                "description": "The amount of profits and losses of all open positions on the account.",
                "type": "number"
              },
              "isTotal": {
                "description": "Indicates the row is a summary of for whole table.",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "candleResponseDefinition": {
      "type": "object",
      "properties": {
        "response": {
          "properties": {
            "executed": {
              "description": "Execution successful",
              "type": "boolean"
            },
            "error": {
              "description": "Type of socket",
              "type": "string"
            }
          }
        },
        "instrument_id": {
          "description": "ID of requested symbol",
          "type": "number"
        },
        "period_id": {
          "description": "Timeframe of the candles",
          "type": "string",
          "enum": [
            "m1",
            "m5",
            "m15",
            "m30",
            "H1",
            "H2",
            "H3",
            "H4",
            "H6",
            "H8",
            "D1",
            "W1",
            "M1"
          ]
        },
        "candles": {
          "description": "Array of candles",
          "type": "array",
          "items": {
            "properties": {
              "candle": {
                "type": "string",
                "description": "Format of candles [timestamp (epoch), BidOpen, BidClose, BidHigh, BidLow, AskOpen, AskClose, AskHigh, AskLow, TickQty]"
              }
            }
          }
        }
      }
    }
  }
}

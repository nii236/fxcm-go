// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClosedPositionResponseDefinitionCloesedPositionItems closed position response definition cloesed position items
// swagger:model closedPositionResponseDefinitionCloesedPositionItems
type ClosedPositionResponseDefinitionCloesedPositionItems struct {

	// The unique name of the account the position is opened on. The name is unique within the database where the account is stored.
	AccountName string `json:"accountName,omitempty"`

	// The amount of the position in thousand units.
	AmountK float64 `json:"amountK,omitempty"`

	// The price at which the position can be closed at the moment.
	Close float64 `json:"close,omitempty"`

	// The date and time when the position was closed.
	CloseTime string `json:"closeTime,omitempty"`

	// The amount of funds subtracted from the account balance to pay for the broker's service in accordance with the terms and conditions of the account trading agreement.
	Com float64 `json:"com,omitempty"`

	// The symbol of the instrument.
	Currency string `json:"currency,omitempty"`

	// unknown
	CurrencyPoint float64 `json:"currencyPoint,omitempty"`

	// The current profit/loss of the position. It is expressed in the account currency.
	GrossPL float64 `json:"grossPL,omitempty"`

	// The trade operation the position is opened by. The possible values are
	// True – Buy
	// False – Sell
	//
	IsBuy float64 `json:"isBuy,omitempty"`

	// Indicates the row is a summary of for whole table.
	IsTotal bool `json:"isTotal,omitempty"`

	// The price the position is opened at.
	Open float64 `json:"open,omitempty"`

	// The date and time when the position was opened.
	OpenTime string `json:"openTime,omitempty"`

	// The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.
	RatePrecision float64 `json:"ratePrecision,omitempty"`

	// The cumulative amount of funds that is added the account balance for holding the position overnight.
	Roll float64 `json:"roll,omitempty"`

	// ID number of the table
	T float64 `json:"t,omitempty"`

	// The unique identification number of the open position. The number is unique within the same database that stores the account the position is opened on.
	TradeID string `json:"tradeId,omitempty"`

	// The simulated delivery date. The date when the position could be automatically closed. The date is provided in the yyyyMMdd format. It is applicable only for positions opened on accounts with the day netting trading mode. Otherwise, the value of this field is blank.
	ValueDate string `json:"valueDate,omitempty"`

	// The current profit/loss per one lot of the position. It is expressed in the account currency.
	VisiblePL float64 `json:"visiblePL,omitempty"`
}

// Validate validates this closed position response definition cloesed position items
func (m *ClosedPositionResponseDefinitionCloesedPositionItems) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ClosedPositionResponseDefinitionCloesedPositionItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClosedPositionResponseDefinitionCloesedPositionItems) UnmarshalBinary(b []byte) error {
	var res ClosedPositionResponseDefinitionCloesedPositionItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

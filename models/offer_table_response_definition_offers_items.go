// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OfferTableResponseDefinitionOffersItems offer table response definition offers items
// swagger:model offerTableResponseDefinitionOffersItems
type OfferTableResponseDefinitionOffersItems struct {

	// The symbol of the instrument
	Currency string `json:"Currency,omitempty"`

	// The current market price the instrument can be bought at.
	Buy float64 `json:"buy,omitempty"`

	// The usage of the buy price. It defines whether the buy price of the instrument is available for trading or not.
	BuyTradable float64 `json:"buyTradable,omitempty"`

	// Sorting index of the instrument
	DefaultSortOrder float64 `json:"defaultSortOrder,omitempty"`

	// Entry margin level.
	Emr float64 `json:"emr,omitempty"`

	// The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.
	FractionDigits float64 `json:"fractionDigits,omitempty"`

	// The highest buy price of the instrument for the current trading day.
	High float64 `json:"high,omitempty"`

	// The type of the instrument. The possible values are
	// 1 – Forex
	// 2 – Indices
	// 3 – Commodity
	// 4 – Treasury
	// 5 – Bullion
	// 6 – Shares
	// 7 – FXIndex
	//
	InstrumentType float64 `json:"instrumentType,omitempty"`

	// Limitation margin level.
	Lmr float64 `json:"lmr,omitempty"`

	// The lowest sell price of the instrument for the current trading day.
	Low float64 `json:"low,omitempty"`

	// Maintenance margin level.
	Mmr float64 `json:"mmr,omitempty"`

	// The unique identification number of the instrument.
	Offerid float64 `json:"offerid,omitempty"`

	// The size of one pip. It used to define the smallest move the instrument can make. In the case of FX instruments, it is expressed in the instrument counter currency. In the case of CFD instruments, it is expressed in the instrument native currency.
	Pip float64 `json:"pip,omitempty"`

	// The cost of one pip per lot. It is expressed in the account currency and used to calculate the P/L value in the account currency.
	PipCost float64 `json:"pipCost,omitempty"`

	// Minimum price change for the instrument
	PipFraction float64 `json:"pipFraction,omitempty"`

	// The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.
	RatePrecision float64 `json:"ratePrecision,omitempty"`

	// The interest amount added to the account balance for holding a one lot long (buy) position overnight. In the case of FX instruments, lot size is determined by the system base unit size. In the case of CFD instruments, lot size equals to one contract. The interest amount is expressed in the account currency and can be positive or negative.
	RollB float64 `json:"rollB,omitempty"`

	// The interest amount added to the account balance for holding a one lot short (sell) position overnight. In the case of FX instruments, lot size is determined by the system base unit size. In the case of CFD instruments, lot size equals to one contract. The interest amount is expressed in the account currency and can be positive or negative.
	RollS float64 `json:"rollS,omitempty"`

	// The current market price the instrument can be sold at.
	Sell float64 `json:"sell,omitempty"`

	// The usage of the sell price. It defines whether the sell price of the instrument is available for trading or not.
	SellTradable bool `json:"sellTradable,omitempty"`

	// Difference between Buy and Sell price in pips.
	Spread float64 `json:"spread,omitempty"`

	// ID number of the table
	T float64 `json:"t,omitempty"`

	// The date and time of the last update of the instrument. ISO 8601 format.
	Time string `json:"time,omitempty"`

	// The simulated delivery date. The date and time when the position opened in the instrument could be automatically closed. The value of this field is provided in the yyyyMMdd format. It is applicable only when instrument trades on account with the day netting trading. Otherwise, the value of this field is blank.
	ValueDate string `json:"valueDate,omitempty"`

	// The tick volume of the current minute. The value of this field represents the number of ticks happened during the current minute.
	Volume float64 `json:"volume,omitempty"`
}

// Validate validates this offer table response definition offers items
func (m *OfferTableResponseDefinitionOffersItems) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OfferTableResponseDefinitionOffersItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OfferTableResponseDefinitionOffersItems) UnmarshalBinary(b []byte) error {
	var res OfferTableResponseDefinitionOffersItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

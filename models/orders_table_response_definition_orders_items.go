// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersTableResponseDefinitionOrdersItems orders table response definition orders items
// swagger:model ordersTableResponseDefinitionOrdersItems
type OrdersTableResponseDefinitionOrdersItems struct {

	// The unique identification number of the account the position is opened on. The number is unique within the database where the account is stored.
	AccountID string `json:"accountId,omitempty"`

	// The unique name of the account the position is opened on. The name is unique within the database where the account is stored.
	AccountName string `json:"accountName,omitempty"`

	// The amount of the position in thousand units.
	AmountK float64 `json:"amountK,omitempty"`

	// The price the order is placed at.
	Buy float64 `json:"buy,omitempty"`

	// The symbol of the instrument.
	Currency string `json:"currency,omitempty"`

	// unknown
	CurrencyPoint float64 `json:"currencyPoint,omitempty"`

	// The trade operation the position is opened by. The possible values are
	// True – Buy
	// False – Sell
	//
	IsBuy bool `json:"isBuy,omitempty"`

	// Indicates if the order is of Entry with Limit and Stop type.
	IsELSOrder bool `json:"isELSOrder,omitempty"`

	// Indicates if the order is of Entry type (resting order).
	IsEntryOrder bool `json:"isEntryOrder,omitempty"`

	// Indicates if the order is of Limit type.
	IsLimitOrder bool `json:"isLimitOrder,omitempty"`

	// Indicates if the order is of Net Amount type.
	IsNetQuantity bool `json:"isNetQuantity,omitempty"`

	// Indicates if the order is of Stop type.
	IsStopOrder bool `json:"isStopOrder,omitempty"`

	// The price of the associated limit order (profit limit level).
	Limit float64 `json:"limit,omitempty"`

	// UNKNOWN
	LimitPegBaseType float64 `json:"limitPegBaseType,omitempty"`

	// UNKNOWN
	LimitRate float64 `json:"limitRate,omitempty"`

	// The unique identifier of an existing OCO group which the order is linked to. The number is unique within the same database that stores the account the contingent order is placed on.
	OcoBulkID float64 `json:"ocoBulkId,omitempty"`

	// The unique identification number of the order. The number is unique within the same database that stores the account the order is placed on.
	Orderid string `json:"orderid,omitempty"`

	// UNKNOWN
	Range float64 `json:"range,omitempty"`

	// The price precision of the instrument. It defines number of digits after the decimal point in the instrument price quote.
	RatePrecision float64 `json:"ratePrecision,omitempty"`

	// The price the order is placed at.
	Sell float64 `json:"sell,omitempty"`

	// The state of the order. The possible values are
	Status string `json:"status,omitempty"`

	// The price of the associated stop order (loss limit level).
	Stop float64 `json:"stop,omitempty"`

	// The number of pips the market should move before the stop order moves the same number of pips after it. If the trailing order is dynamic (automatically updates every 0.1 of a pip), then the value of this field is 1. If the order is not trailing, the value of this field is 0.
	StopMove float64 `json:"stopMove,omitempty"`

	// UNKNOWN
	StopPegBaseType float64 `json:"stopPegBaseType,omitempty"`

	// UNKNOWN
	StopRate float64 `json:"stopRate,omitempty"`

	// ID number of the table
	T float64 `json:"t,omitempty"`

	// The time when the order was created
	Time string `json:"time,omitempty"`

	// The time-in-force option of the order. The possible values are
	// GTC – Good Till Cancelled
	// IOC – Immediate Or Cancel
	// FOK – Fill Or Kill
	// DAY – Day Order
	// GTD – Good Till Date
	//
	TimeInForce string `json:"timeInForce,omitempty"`

	// The order type. The possible values are
	// S – Stop
	// ST – Trailing Stop
	// L – Limit
	// SE – Entry Stop
	// LE – Entry Limit
	// STE – Trailing Entry Stop
	// LTE – Trailing Entry Limit
	// C – Close
	// CM – Close Market
	// CR – Close Range
	// O – Open
	// OM – Open Market
	// OR – Open Range
	// M – Margin Call
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this orders table response definition orders items
func (m *OrdersTableResponseDefinitionOrdersItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ordersTableResponseDefinitionOrdersItemsTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","IOC","FOK","DAY","GTD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersTableResponseDefinitionOrdersItemsTypeTimeInForcePropEnum = append(ordersTableResponseDefinitionOrdersItemsTypeTimeInForcePropEnum, v)
	}
}

const (
	// OrdersTableResponseDefinitionOrdersItemsTimeInForceGTC captures enum value "GTC"
	OrdersTableResponseDefinitionOrdersItemsTimeInForceGTC string = "GTC"
	// OrdersTableResponseDefinitionOrdersItemsTimeInForceIOC captures enum value "IOC"
	OrdersTableResponseDefinitionOrdersItemsTimeInForceIOC string = "IOC"
	// OrdersTableResponseDefinitionOrdersItemsTimeInForceFOK captures enum value "FOK"
	OrdersTableResponseDefinitionOrdersItemsTimeInForceFOK string = "FOK"
	// OrdersTableResponseDefinitionOrdersItemsTimeInForceDAY captures enum value "DAY"
	OrdersTableResponseDefinitionOrdersItemsTimeInForceDAY string = "DAY"
	// OrdersTableResponseDefinitionOrdersItemsTimeInForceGTD captures enum value "GTD"
	OrdersTableResponseDefinitionOrdersItemsTimeInForceGTD string = "GTD"
)

// prop value enum
func (m *OrdersTableResponseDefinitionOrdersItems) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ordersTableResponseDefinitionOrdersItemsTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrdersTableResponseDefinitionOrdersItems) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

var ordersTableResponseDefinitionOrdersItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["S","ST","L","SE","LE","STE","LTE","C","CM","CR","O","OM","OR","M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersTableResponseDefinitionOrdersItemsTypeTypePropEnum = append(ordersTableResponseDefinitionOrdersItemsTypeTypePropEnum, v)
	}
}

const (
	// OrdersTableResponseDefinitionOrdersItemsTypeS captures enum value "S"
	OrdersTableResponseDefinitionOrdersItemsTypeS string = "S"
	// OrdersTableResponseDefinitionOrdersItemsTypeST captures enum value "ST"
	OrdersTableResponseDefinitionOrdersItemsTypeST string = "ST"
	// OrdersTableResponseDefinitionOrdersItemsTypeL captures enum value "L"
	OrdersTableResponseDefinitionOrdersItemsTypeL string = "L"
	// OrdersTableResponseDefinitionOrdersItemsTypeSE captures enum value "SE"
	OrdersTableResponseDefinitionOrdersItemsTypeSE string = "SE"
	// OrdersTableResponseDefinitionOrdersItemsTypeLE captures enum value "LE"
	OrdersTableResponseDefinitionOrdersItemsTypeLE string = "LE"
	// OrdersTableResponseDefinitionOrdersItemsTypeSTE captures enum value "STE"
	OrdersTableResponseDefinitionOrdersItemsTypeSTE string = "STE"
	// OrdersTableResponseDefinitionOrdersItemsTypeLTE captures enum value "LTE"
	OrdersTableResponseDefinitionOrdersItemsTypeLTE string = "LTE"
	// OrdersTableResponseDefinitionOrdersItemsTypeC captures enum value "C"
	OrdersTableResponseDefinitionOrdersItemsTypeC string = "C"
	// OrdersTableResponseDefinitionOrdersItemsTypeCM captures enum value "CM"
	OrdersTableResponseDefinitionOrdersItemsTypeCM string = "CM"
	// OrdersTableResponseDefinitionOrdersItemsTypeCR captures enum value "CR"
	OrdersTableResponseDefinitionOrdersItemsTypeCR string = "CR"
	// OrdersTableResponseDefinitionOrdersItemsTypeO captures enum value "O"
	OrdersTableResponseDefinitionOrdersItemsTypeO string = "O"
	// OrdersTableResponseDefinitionOrdersItemsTypeOM captures enum value "OM"
	OrdersTableResponseDefinitionOrdersItemsTypeOM string = "OM"
	// OrdersTableResponseDefinitionOrdersItemsTypeOR captures enum value "OR"
	OrdersTableResponseDefinitionOrdersItemsTypeOR string = "OR"
	// OrdersTableResponseDefinitionOrdersItemsTypeM captures enum value "M"
	OrdersTableResponseDefinitionOrdersItemsTypeM string = "M"
)

// prop value enum
func (m *OrdersTableResponseDefinitionOrdersItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ordersTableResponseDefinitionOrdersItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrdersTableResponseDefinitionOrdersItems) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersTableResponseDefinitionOrdersItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersTableResponseDefinitionOrdersItems) UnmarshalBinary(b []byte) error {
	var res OrdersTableResponseDefinitionOrdersItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
